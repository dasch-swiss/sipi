name: CI

on:
  schedule:
    # run every midnight (on main)
    - cron: '0 0 * * *'
  push:
  release:
    types: [published]

jobs:
  test:
    name: Run Unit and E2E Tests
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 50
      -
        name: Checkout private ci-assets
        uses: actions/checkout@v3
        with:
          repository: dasch-swiss/dsp-ci-assets
          token: ${{ secrets.DASCHBOT_PAT }} # `DASCHBOT_PAT` is a secret that contains your PAT
          path: ci
      -
        name: Copy ci-assets
        run: |
          cp $GITHUB_WORKSPACE/ci/kakadu/v8_3-01727L.zip $GITHUB_WORKSPACE/vendor/v8_3-01727L.zip
      -
        name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      -
        name: install requirements
        run: make install-requirements
      -
        name: test
        run: make test-ci

  integration:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 50
      -
        name: Checkout private ci-assets
        uses: actions/checkout@v3
        with:
          repository: dasch-swiss/dsp-ci-assets
          token: ${{ secrets.DASCHBOT_PAT }} # `DASCHBOT_PAT` is a secret that contains your PAT
          path: ci
      -
        name: Copy ci-assets
        run: |
          cp $GITHUB_WORKSPACE/ci/kakadu/v8_3-01727L.zip $GITHUB_WORKSPACE/vendor/v8_3-01727L.zip
      -
        name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      -
        name: install requirements
        run: make install-requirements
      -
        name: build docker image and run integration tests
        run: make test-integration

  # publish only on release
  publish-images:
    name: Build and Publish Images to Dockerhub
    needs: [test, integration]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
    steps:
      -
        name: checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 50
      -
        name: checkout private ci-assets
        uses: actions/checkout@v3
        with:
          repository: dasch-swiss/dsp-ci-assets
          token: ${{ secrets.DASCHBOT_PAT }} # `DASCHBOT_PAT` is a secret that contains your PAT
          path: ci
      -
        name: copy ci-assets
        run: |
          cp $GITHUB_WORKSPACE/ci/kakadu/v8_3-01727L.zip $GITHUB_WORKSPACE/vendor/v8_3-01727L.zip
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      -
        name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
      -
        name: Build (always) and push (on release)
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64 #, linux/arm64
          push: true
          tags: daschswiss/sipi:latest, daschswiss/sipi:${{ steps.get_version.outputs.VERSION }}
      -
        name: Update release notes
        uses: lakto/gren-action@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

  # build documentation
  docs:
    name: Build Docs Testrun
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          make docs-install-requirements
      - name: run docs build
        run: make docs-build

  # publish documentation on release
  publish-docs:
    name: Build and Publish Docs
    needs: [docs]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
      - name: Deploy docs
        uses: mhausenblas/mkdocs-deploy-gh-pages@master
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          CUSTOM_DOMAIN: sipi.io
          CONFIG_FILE: docs/mkdocs.yml
          REQUIREMENTS: docs/requirements.txt
