{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>SIPI is a multithreaded, high-performance, IIIF compatible media server developed by the Data and Service Center for the Humanities at the University of Basel. It is designed to be used by archives, libraries, and other institutions that need to preserve high-quality images while making them available online.</p> <p>SIPI implements the Image API 3.0 of the International Image Interoperability Framework (IIIF), and efficiently converts between image formats, preserving metadata contained in image files. In particular, if images are stored in JPEG 2000 format, Sipi can convert them on the fly to formats that are commonly used on the Internet. SIPI offers a flexible framework for specifying authentication and authorization logic in Lua scripts, and supports restricted access to images, either by reducing image dimensions or by adding watermarks. It can easily be integrated with Knora. In addition SIPI preserves most of the EXIF, IPTC and XMP metadata and can preserve or transform ICC color profiles.</p> <p>In addition, a simple webserver is integrated. The server is able to serve most common file types. In addition Lua scripts and embedded Lua (i.e., Lua embedded into HTML pages using the tags &lt;lua&gt;\u2026&lt;/lua&gt; are supported.</p> <p>SIPI can also be used from the command line to convert images to/from TIFF-, JPEG 2000, JPEG- and PNG- formats. For all these conversion, Sipi tries to preserve all embedded metadata such as - IPTC - EXIF - XMP - ICC color profiles. However, due to the limitations of some file formats, it cannot be guaranteed that all metadata and ICC profiles are preserved. - JPEG2000 (J2k) does not allow all types of ICC profiles   profiles. Unsupported profile types will be added to the J2k header as comment and will be reinstated if the J2k file is converted back to the TIFF-format.</p> <p>SIPI is a free software, released under the GNU Affero General Public License. It is written in C++ and runs on Linux and macOS. Note: In order to compile SIPI, the user has to provide a licensed source of the kakadu software.</p> <p>It is written in C++ and runs on Linux (including Debian, Ubuntu, and CentOS) and macOS.</p> <p>Freely distributable binary releases are available daschswiss/sipi as docker image.</p>"},{"location":"building/","title":"Building SIPI from Source Code","text":""},{"location":"building/#prerequisites","title":"Prerequisites","text":"<p>To build SIPI from source code, you must have Kakadu, a JPEG 2000 development toolkit that is not provided with Sipi and must be licensed separately. The Kakadu source code archive <code>v8_0_5-01727L.zip</code> must be placed in the <code>vendor</code> subdirectory of the source tree before building Sipi.</p> <p>Sipi's build process requires CMake (minimal Version 3.0.0), a C++ compiler that supports the C++11 standard (such as GCC or clang), and several libraries that are readily available on supported platforms. The test framework requires Python 3, (version 3.5 or later), Apache ab (which is assumed to be installed by default on macOS Sierra), nginx, and a recent version of ImageMagick. Instructions for installing these prerequisites are given below.</p> <p>The build process downloads and builds SIPI's other prerequisites.</p> <p>SIPI uses the Adobe ICC Color profiles, which are automatically downloaded by the build process into the file <code>icc.zip</code>. The user is responsible for reading and agreeing with Adobe's license conditions, which are specified in the file <code>Color Profile EULA.pdf</code>.</p>"},{"location":"building/#docker","title":"docker","text":"<p>We provide a docker image based on Ubuntu LTS releases, containing all dependencies: https://hub.docker.com/r/dhlabbasel/sipi-base/ If you must build sipi, the preferred way is to build it inside a docker image. Docker must be installed on the system. Then, in the top directory of the source tree, do</p> <ul> <li><code>make compile</code> will download and compile SIPI within a docker container</li> <li><code>make test</code> to run the full test suite</li> <li><code>make run</code> to run SIPI in docker image</li> </ul>"},{"location":"building/#macos","title":"macOS","text":"<p>You will need Homebrew and at least OSX 10.11.5.</p> <p>Prerequisites for building Sipi without its automated test framework:</p> <pre><code>xcode-select --install\nbrew install cmake\nbrew install doxygen\nbrew install openssl\nbrew install libmagic\nbrew install gettext\nbrew install libidn\n</code></pre> <p>If you also want to run Sipi's tests:</p> <pre><code>brew install nginx\nsudo chown -R $USER /usr/local/var/log/nginx/\nbrew install imagemagick --with-openjpeg\nbrew install python3\npip3 install Sphinx\npip3 install pytest\npip3 install requests\npip3 install psutil\npip3 install iiif_validator\n</code></pre>"},{"location":"building/#ubuntu-2204","title":"Ubuntu 22.04","text":"<p>Prerequisites for building Sipi without its automated test framework:</p> <pre><code>sudo apt-get install g++-12\nsudo apt-get install cmake\nsudo apt-get install libssl-dev\nsudo apt-get install doxygen\nsudo apt-get install libreadline-dev\nsudo apt-get install gettext\nsudo apt-get install libmagic-dev\nsudo apt-get install unzip\nsudo apt-get install libidn11-dev\n</code></pre> <p>If you also want to run Sipi's tests, you will need ImageMagick, version 7.0.6 or higher. We suggest compiling it from source:</p> <pre><code>sudo apt-get install libtiff5-dev libjpeg-turbo8-dev libopenjp2-7-dev\nwget https://github.com/ImageMagick/ImageMagick/archive/7.0.6-0.tar.gz\ntar -xzf 7.0.6-0.tar.gz\ncd ImageMagick-7.0.6-0/\n./configure\nmake\nsudo make install\nsudo ldconfig /usr/local/lib\n</code></pre> <p>Then:</p> <pre><code>sudo apt-get install ab\nsudo apt-get install nginx\nsudo chown -R $USER /var/log/nginx\nsudo apt-get install python3\nsudo apt-get install python3-pip\nsudo -H pip3 install --upgrade pip\nsudo -H pip3 install Sphinx\nsudo -H pip3 install pytest\nsudo -H pip3 install requests\nsudo -H pip3 install psutil\nsudo -H pip3 install iiif_validator\n</code></pre>"},{"location":"building/#debian-8","title":"Debian 8","text":"<p>First, follow the instructions for ubuntu-build.</p> <p>Then, CMake has to be patched. Unfortunaltely the version of CMake provided by the Debian packages contains a bug and cannot find the OpenSSL libraries and includes. To apply the patch, go to the Sipi dicrectory and run:</p> <pre><code>sudo ./debian-cmake-patch.sh\n</code></pre>"},{"location":"building/#docker_1","title":"Docker","text":"<p>We provide a docker image based on Ubuntu LTS releases, containing all dependencies: https://hub.docker.com/r/dhlabbasel/sipi-base/</p>"},{"location":"building/#compiling-the-source-code","title":"Compiling the Source Code","text":"<p>Start in the <code>build</code> subdirectory of the source tree:</p> <pre><code>cd build\n</code></pre> <p>Then compile Sipi:</p> <pre><code>cmake ..\nmake\n</code></pre> <p>By default, Sipi is built without optimization and with debug information output. To compile Sipi with optimization level 3, run:</p> <pre><code>cmake .. -DMAKE_DEBUG:BOOL=OFF\nmake\n</code></pre>"},{"location":"building/#running-tests","title":"Running Tests","text":"<p>You can run the automated tests in the <code>build</code> directory like this:</p> <pre><code>make test // will run all tests (minimum output)\nctest --verbose // will run all tests (detailed output)\nmake check // will run only e2e tests (detailed output)\n</code></pre>"},{"location":"building/#making-a-directory-tree-for-installing-sipi","title":"Making a Directory Tree for Installing Sipi","text":"<p>In <code>build</code>, type this to install Sipi in the <code>local</code> subdirectory of the source tree:</p> <pre><code>make install\n</code></pre> <p>You can then copy the contents of <code>local</code> to the desired location.</p>"},{"location":"building/#generating-documentation","title":"Generating Documentation","text":"<p>To generate this manual in HTML format, <code>cd</code> to the <code>manual</code> subdirectory of the source tree and type:</p> <pre><code>make html\n</code></pre> <p>You will then find the manual under <code>manual/_build/html</code>.</p> <p>To generate developer documentation about Sipi's C++ internals, <code>cd</code> to the <code>build</code> directory and type:</p> <pre><code>make doc\n</code></pre> <p>You will find the developer documentation in HTML format under <code>doc/html</code>. To generate developer documentation in PDF format, first ensure that you have LaTeX installed. Then <code>cd</code> to <code>doc/html/latex</code> and type <code>make</code>.</p>"},{"location":"building/#starting-over","title":"Starting Over","text":"<p>To delete the previous build and start over from scratch, <code>cd</code> to the top level of the source tree and type:</p> <pre><code>rm -rf build/* lib local extsrcs include/*_icc.h\n</code></pre>"},{"location":"building/#building-inside-docker","title":"Building inside Docker","text":"<p>All that was described before, can also be done by using docker. All commands need to be executed from inside the source directory (and not <code>build</code> the build directory). Also, Docker needs to be installed on the system.</p> <pre><code>// deletes cached image and needs only to be used when newer image is available on dockerhub\ndocker image rm --force dhlabbasel/sipi-base:18.04\n// building\ndocker run --rm -v $PWD:/sipi dhlabbasel/sipi-base:18.04 /bin/sh -c \"cd /sipi/build; cmake .. &amp;&amp; make\"\n// building and running all tests\ndocker run --rm -v $PWD:/sipi dhlabbasel/sipi-base:18.04 /bin/sh -c \"cd /sipi/build; cmake .. &amp;&amp; make &amp;&amp; ctest --verbose\"\n// make html documentation\ndocker run --rm -v $PWD:/sipi dhlabbasel/sipi-base:18.04 /bin/sh -c \"cd /sipi/manual; make html\"\n</code></pre> <p>Since we mount the current source directory into the docker container, all build artifacts can be accessed as if the build would have been performed without docker.</p>"},{"location":"developing/","title":"Developing Sipi","text":""},{"location":"developing/#using-an-ide","title":"Using an IDE","text":""},{"location":"developing/#clion","title":"CLion","text":"<p>If you are using the CLion IDE, put <code>-j 1</code> in Preferences -&gt; Build, Execution, Deployment -&gt; CMake -&gt; Build options, to prevent CMake from building with multiple processes. Also, note that code introspection in the CLion editor may not work until it has run CMake.</p>"},{"location":"developing/#codeblocks","title":"Code::Blocks","text":"<p>If you are using the Code::Blocks_ IDE, you can build a cdb project:</p> <pre><code>cd build\ncmake .. -G \"CodeBlocks - Unix Makefiles\"\n</code></pre>"},{"location":"developing/#writing-tests","title":"Writing Tests","text":"<p>We use two test frameworks. We use googletest for unit test and pytest for end-to-end tests.</p>"},{"location":"developing/#unit-tests","title":"Unit Tests","text":"<p>TBA</p>"},{"location":"developing/#end-to-end-tests","title":"End-to-End Tests","text":"<p>To add end-to-end tests, add a Python class in a file whose name begins with <code>test</code>, in the <code>test</code> directory. The class's methods, whose names must also begin with <code>test</code>, should use the <code>manager</code> fixture defined in <code>test/conftest.py</code>, which handles starting and stopping a Sipi server, and provides other functionality useful in tests. See the existing <code>test/test_*.py</code> files for examples.</p> <p>To facilitate testing client HTTP connections in Lua scripts, the <code>manager</code> fixture also starts and stops an <code>nginx</code> instance, which can be used to simulate an authorization server. For example, the provided <code>nginx</code> configuration file, <code>test/nginx/nginx.conf</code>, allows <code>nginx</code> to act as a dummy Knora API server for permission checking: its <code>/v1/files</code> route returns a static JSON file that always grants permission to view the requested file.</p>"},{"location":"developing/#commit-message-schema","title":"Commit Message Schema","text":"<p>When writing commit messages, we stick to this schema:</p> <pre><code>type (scope): subject\nbody\n</code></pre> <p>Types:</p> <ul> <li>feature (new feature for the user)</li> <li>fix (bug fix for the user)</li> <li>docs (changes to the documentation)</li> <li>style (formatting, etc)</li> <li>refactor (refactoring production code, e.g. renaming a variable)</li> <li>test (adding missing tests, refactoring tests)</li> <li>build (changes to CMake configuration, etc.)</li> <li>enhancement (residual category)</li> </ul> <p>Example:</p> <pre><code>feature (HTTP server): support more authentication methods\n</code></pre>"},{"location":"introduction/","title":"Simple Image Presentation Interface (SIPI) - Introduction","text":""},{"location":"introduction/#what-is-sipi","title":"What is SIPI?","text":""},{"location":"introduction/#1-a-iiif-image-api-v3-level-2-conformant-image-server","title":"1. A IIIF Image API V3 level 2 conformant image server","text":"<ul> <li>SIPI is a full multithreaded, high performance, level2 compliant IIIF Image API 3.0 written in C++. For the   JPEG2000 implementation, it relies on the commercial kakadu-library, but otherwise it is   completely open source on GitHub. It offers special support for multipage PDFs   (through a SIPI-specific extensions to the IIIF Image API).</li> <li>SIPI has been designed for the long term preservation of images, intended for the needs of the cultural heritage field. Thus it offers   some unique features for this purpose:</li> <li>all file format conversions try to preserve all metadata (EXIF, XMP, IPTC etc.). These functionality is based     on the open source exiv2 library.</li> <li>SIPI can deal with and convert ICC color profiles based on the littlecms library.</li> <li>SIPI can embed important preservation data such as the checksum of the pixel values, original filename etc. in the file     headers.</li> <li>it supports SSL (https://\u2026)</li> <li>SIPI embeds the scripting language LUA that allows a very flexible, highly customizable    deployment that can be adapted to the enviroment SIPI is being used in. Before serving any request, a configurable   LUA script (\"pre flight script\") is being executed that can check access rights, restrictions or other stuff. SIPI LUA   has been extended with many SIPI-specific functions (including image conversion, HTTP-client etc.)</li> </ul>"},{"location":"introduction/#2-an-ordinary-http-webserver","title":"2. An ordinary HTTP webserver","text":"<ul> <li>SIPI is also a normal webserver that is able to deliver arbitrary files. It also implements LUA embedded into HTML   pages.</li> <li>Using SIPI LUA scripts and routing, RESTful interfaces may be implemented. E.g. image upload and conversions may   by supported.</li> </ul>"},{"location":"introduction/#3-an-image-format-conversion-tool","title":"3. An image format conversion tool","text":""},{"location":"introduction/#generic-format-conversions","title":"Generic format conversions","text":"<ul> <li>image format conversion are supported between TIFF, JPEG2000, JPG and PNG. SIPI can   be used either as standalone command line tool or in server mode using LUA scripting.</li> <li>SIPI preserves most embedded metadata (EXIF, IPTC, TIFF, XMP) and is preserving and/or converting ICC color profiles.</li> </ul>"},{"location":"introduction/#preservation-metadata-sipi-specific","title":"Preservation metadata (SIPI specific)","text":"<ul> <li>SIPI is able to add SIPI specific metadata to most file formats. These metadata are relevant for long-term   preservation and include the following information:<ul> <li><code>original filename</code>: The original file name before conversion</li> <li><code>original mimetype</code>: The mimetype of the original image before conversion</li> <li><code>pixel checksum</code>: A checksum (e.g. SHA-256) of the original pixel values. This checksum can be used to verify that   a format conversion didn't alter the image content.</li> <li><code>icc profile</code>: (optional) The raw ICC profile as binary string. This field is added if the destination file      format has no standard way to embed ICC color profiles (e.g. JPEG).</li> </ul> </li> </ul>"},{"location":"introduction/#4-integrated-sqlite3-database","title":"4. Integrated sqlite3 Database","text":"<p>SIPI has an integrated sqlite3 database that can be used with special LUA extensions. Thus, SIPI can be used as a standalone media server with extended functionality. The sqlite3 database may be used to store metadata about images, user data etc.</p>"},{"location":"introduction/#who-is-behind-sipi","title":"Who is behind SIPI?","text":"<p>SIPI is developed and maintained by Lukas Rosenthaler, professor for Digital Humanities at the University of Basel, in collaboration with the \"Data and Service Center for the Humanities\" (DaSCH.</p>"},{"location":"introduction/#how-to-get-sipi","title":"How to get SIPI?","text":"<ul> <li>The easiest way is to use the docker image provided on dockerhup daschswiss/sipi.   The dockerized version has the binary kakadu library compiled in.</li> <li>You can compile SIPI from the sources on github. Since SIPI uses many   third-party open source libraries, compiling Yourself is tedious and my be frustrating (but possible). You have to   provide the licensed source of kakadu by Yourself. See kakadu software on how to get a   licensed version of the kakadu code. SIPI should compile on Linux (Ubuntu) and Apple OS X.</li> </ul>"},{"location":"introduction/#sipi-as-iiif-server","title":"SIPI as IIIF-Server","text":""},{"location":"introduction/#extensions-to-the-iiif-standard","title":"Extensions to the IIIF-Standard","text":""},{"location":"introduction/#preflight-script","title":"Preflight script","text":"<ul> <li>Before executing a IIIF request, a freely configurable LUA-script is being called. This script must return the   permission to access the resource (\"allow\", \"restrict\" \"deny\") and the final path to the resource. This allows   to handle access rights etc. Within the LUA-script, permission databases etc. may be accessed through RESTful   services or using the internal SQLite database. In addition, the path to the resource may be redirected or other   limitations imposed (size, watermark etc.).</li> <li>The preflight script has access to the full HTTP(s) header including cookies and Authorization information. There are   also utility functions to decode JSON Web Tokens (JWT).</li> </ul>"},{"location":"introduction/#access-to-non-image-files","title":"Access to non-image files","text":"<p>Sometimes it would be helpful to deliver non-image files such as XML, CSV etc. from the same directory tree as the IIIF-conformant images: - The url to download a file must have the form <code>http(s)://{server}/{prefix}/{fileid}/file</code>. The clause   /file at the end indicates that the file should bypass any IIIF URl processing and just be served as file. - Also in this case, a preflight script may be configured to control access to such file resources. - if the url has the form <code>http(s)://{server}/{prefix}/{fileid}/info.json</code>, SIPI returns a JSON containing   information about the file. The JSON has the from:   <code>json   {     \"@context\": \"http://sipi.io/api/file/3/context.json\",     \"id\": \"https://localhost:1025/images/csv_test.csv\",     \"internalMimeType\": \"text/csv\",     \"fileSize\": 36   }</code>   Please note that SIPI determines the mimetype using the magic number. Due to the limitations thereof the mimetype - may not be determined exactly.</p>"},{"location":"lua-image/","title":"Lua image functions","text":"<p>Through Lua scripting, SIPI allows a wide area of utilities to analyze, manipulate and convert images to/from different formats. This functionality allows to use SIPI e.g. for offering image upload and converting these images into IIIF conformant long-term storage formats (e.g. JPEG2000). It allows to programmatically modify an image before delivering it to the client, or to extract data from the images.</p> <p>The basic concept is a specialized Lua image object that offers all methods to manipulate images.</p>"},{"location":"lua-image/#sipiimagenewfilename","title":"SipiImage.new(filename)","text":"<p>This method creates a new image object by reading an image file that has to be located somewhere on the SIPI server.</p> <p>The simple forms are:</p> <pre><code>img = SipiImage.new(\"filepath\")\nimg = SipiImage.new(index)\n</code></pre> <p>The first variant opens a file given by \"filepath\", the second variant opens an uploaded file directly using the integer index to the uploaded files.</p> <p>If the index of an uploaded file is passed as an argument, this method adds additional metadata to the <code>SipiImage</code> object that is constructed: the file's original name, its MIME type, and its SHA256 checksum. When the <code>SipiImage</code> object is then written to another file, this metadata will be stored in an extra header record.</p> <p>If a filename is passed, the method does not add this metadata.</p> <p>The more complex form is as follows:</p> <pre><code>img = SipiImage.new(\"filename\", {\n        region=&lt;iiif-region-string&gt;,\n        size=&lt;iiif-size-string&gt;,\n        reduce=&lt;integer&gt;,\n        original=origfilename,\n        hash=\"md5\"|\"sha1\"|\"sha256\"|\"sha384\"|\"sha512\"\n      })\n</code></pre> <p>This creates a new Lua image object and loads the given image into. The second form allows to indicate a region, the size or a reduce factor and the original filename. The <code>hash</code> parameter indicates that the given checksum should be calculated out of the pixel values and written into the header. All parameters are optional, but at least one has to given. The meaning of the parameters are:</p> <ul> <li><code>region</code>: A region in IIIF format the image should be cropped to.</li> <li><code>size</code>: The size of the resulting image as valid IIIF size string.</li> <li><code>reduce</code>: An much faster alternative to size, if the image size will be   reduced by a integer factor (2=half size, 3=one third size etc.)</li> <li><code>original</code>: The original file name that should be recorded in the metadata</li> <li><code>hash</code>: The Hash algorithm that will be used for the hash of the pixel values. Valid   entries are <code>md5</code>, <code>sha1</code>, <code>sha256</code>, <code>sha384</code> and <code>sha512</code>.</li> </ul> <p>For example to read an image and include the SIPI preservation metadata, the function is called as follows:</p> <pre><code>SipiImage.new(\"path_to_file\", { original=\"my_image.tif\", hash=\"md5\" }\n</code></pre> <p>This call will include the preservation metadata (please note that in this case the original filename is mandatory, since Lua has know direct knowledge about the original filename. The filepath given as first parameter must not and normally does not correspond to the original filename). The <code>hash</code>-parameter indicates to use the md5-algorithm for the has of the pixel values.</p>"},{"location":"lua-image/#sipiimagedims","title":"SipiImage.dims()","text":"<pre><code>  success, dims = img.dims()\n  if success then\n      server.print('nx=', dims.nx, ' ny=', dims.ny, ' ori=', dims.orientation)\n  end\n</code></pre> <p>This method returns basic information about the image. It returns a Lua table withg the following items: - nx: Number of pixels in X direction (image width) - ny: Number of pixels in Y direction (image height) - orientation: Orientation of image which is an integer with the following meaning:   - 1: (TOPLEFT) The 0th row represents the visual top of the image, and the 0th column represents the visual left-hand side.   - 2: (TOPRIGHT) The 0th row represents the visual top of the image, and the 0th column represents the visual right-hand side.   - 3: (BOTRIGHT) The 0th row represents the visual bottom of the image, and the 0th column represents the visual right-hand side.   - 4: (BOTLEFT) The 0th row represents the visual bottom of the image, and the 0th column represents the visual left-hand side.   - 5: (LEFTTOP) The 0th row represents the visual left-hand side of the image, and the 0th column represents the visual top.   - 6: (RIGHTTOP) The 0th row represents the visual right-hand side of the image, and the 0th column represents the visual top.   - 7: (RIGHTBOT) The 0th row represents the visual right-hand side of the image, and the 0th column represents the visual bottom.   - 8: (LEFTBOT) The 0th row represents the visual left-hand side of the image, and the 0th column represents the visual bottom.</p>"},{"location":"lua-image/#sipiimageexifexif-parameter-name","title":"SipiImage.exif(&lt;EXIF-parameter-name&gt;)","text":"<pre><code>success, value-or-errormsg = img:exit(&lt;EXIF-parameter-name&gt;)\n</code></pre> <p>Return the value of an exif parameter. The following EXIF parameters are supported: - \"Orientation\": Orientation (integer) - \"Compression\": Compression method (integer) - \"PhotometricInterpretation\": The photometric interpretation (integer) - \"SamplesPerPixel\": Samples per pixel (integer) - \"ResolutionUnit\": 1=none, 2=inches, 3=cm (integer) - \"PlanarConfiguration\": Planar configuration, 1=chunky, 2=planar (integer) - \"DocumentName\": Document name (string) - \"Make\": Make of camera or scanner (string) - \"Model\": Model of camera or scanner (string) - \"Software\": Software used for capture (string) - \"Artist\": Artist that created the image (string) - \"DateTime\": Date and time of creation (string) - \"ImageDescription\": Image description - \"Copyright\": Copyright info - </p>"},{"location":"lua-image/#sipiimagecropiiif-region-string","title":"SipiImage.crop(&lt;iiif-region-string&gt;)","text":"<pre><code>success, errormsg = img.crop(&lt;IIIF-region-string&gt;)\n</code></pre> <p>Crops the image to the given rectangular region. The parameter must be a valid IIIF-region string.</p>"},{"location":"lua-image/#sipiimagescaleiiif-size-string","title":"SipiImage.scale(&lt;iiif-size-string&gt;)","text":"<pre><code>success, errormsg = img.scale(&lt;iiif-size-string&gt;)\n</code></pre> <p>Resizes the image to the given size as IIIF-conformant size string.</p>"},{"location":"lua-image/#sipiimagerotateiiif-rotation-string","title":"SipiImage.rotate(&lt;iiif-rotation-string&gt;)","text":"<pre><code>success, errormsg = img.rotate(&lt;iiif-rotation-string&gt;)\n</code></pre> <p>Rotates and/or mirrors the image according the given iiif-conformant rotation string.</p>"},{"location":"lua-image/#sipiimagetopleft","title":"SipiImage.topleft()","text":"<p>Rotates an image to the standard TOPLEFT orientation if necessary. Please note that viewers using tiling (e.g. openseadragon) require images in TOPLEFT rotation. Thus, it is highly recommended that all images served by SIPI IIIF will be set to TOPLEFT orientation. This process may involve rotation of 90, 180 or 270 degrees and possible mirroring which does not change the pixel values through interpolation.</p>"},{"location":"lua-image/#sipiimagewatermarkwm-file-path","title":"SipiImage.watermark(wm-file-path)","text":"<pre><code>success, errormsg = img.watermark(wm-file-path)\n</code></pre> <p>Applies the given watermark file to the image. The watermark file must be a single channel 8-Bit gray value TIFF file.</p>"},{"location":"lua-image/#sipiimagewritefilepath-compression_params","title":"SipiImage.write(filepath, [compression_params])","text":"<pre><code>success, errormsg = img.write(filepath)\nsuccess, errormsg = img.write('HTTP.jpg')\n</code></pre> <p>The first version write the image to a file in the SIPI server, the second writes the file to the HTTP connection (which is done whenever the basename of the output file is <code>HTTP</code>):</p> <p>Parameters:</p> <ul> <li> <p><code>filepath</code>: Path to output file. The file format is determined by the filename extension. Supported are</p> <ul> <li><code>jpg</code> : writes a JPEG file</li> <li><code>tif</code> : writes a TIFF file</li> <li><code>png</code> : writes a png file</li> <li><code>jpx</code> : writes a JPGE2000 file</li> <li><code>pdf</code> : writes a PDF file</li> </ul> </li> <li> <p><code>compression_params</code>: (optional) An optional Lua table with compression parameters (which are dependent on the   chosen output file format!) can be given. All compression parameters are optional. But if a compression parameter   table is give, it must have at least one entry.</p> </li> <li>JPEG format:<ul> <li><code>quality</code>: Number between 1 and 100 (1 highest compression, worst quality, 100 lowest compression, best quality)      </li> </ul> </li> <li>JPEG2000 format:<ul> <li><code>Sprofile</code>: Any of <code>PROFILE0</code>, <code>PROFILE1</code>, <code>PROFILE2</code>, <code>PART2</code>, <code>CINEMA2K</code>, <code>CINEMA4K</code>, <code>BROADCAST</code>,   <code>CINEMA2S</code>, <code>CINEMA4S</code>, <code>CINEMASS</code>, <code>IMF</code>. Defaults to <code>PART2</code>.</li> <li><code>Creversible</code>: Use the reversible compression algorithms of JPEG2000. Must be string <code>yes</code> or <code>no</code>. Defaults       to <code>yes</code>.</li> <li><code>Clayers</code>: Number of layers to use.</li> <li><code>Clevels</code>: Number of levels to use.</li> <li><code>Corder</code>: Ordering of file components. Must be one of the following strings: <code>LRCP</code>, <code>RLCP</code>, <code>RPCL</code>, <code>PCRL</code> or   <code>CPRL</code>.</li> <li><code>Cprecincts</code>: A kakadu conformant precinct string.</li> <li><code>rates</code>: rates string as used in kakadu.</li> </ul> </li> </ul>"},{"location":"lua-image/#sipiimagesendformat","title":"SipiImage.send(format)","text":"<pre><code>success, errormsg = img.send(format)\n</code></pre> <p>Sends the file to the HTTP connection. As format-strings are allowed:</p> <ul> <li><code>jpg</code> : writes a JPEG file</li> <li><code>tif</code> : writes a TIFF file</li> <li><code>png</code> : writes a png file</li> <li><code>jpx</code> : writes a JPGE2000 file</li> </ul>"},{"location":"lua-image/#sipiimagemimetype_consistencymimetype","title":"SipiImage.mimetype_consistency(mimetype)","text":"<pre><code>img.mimetype_consistency(mimetype, original_filename)\n</code></pre> <p>This method checks if the supplied mimetype (e.g. from received from the browser during upload), the file according to the magic number (file signature) and the file extension are consistent. The parameters are:</p> <ul> <li><code>mimetype</code>: The expected mimetype.</li> <li><code>filename</code>: The original filename with extension.</li> </ul> <p>Please note that mimetype handling can be quite complex, since the correspondence between file extensions and mimetypes is not unambiguous. In addition the file signature can not identify all mimetypes. For example, A \"comma seperated value\" value file (extension <code>.csv</code>) can have a mimetype of <code>application/csv</code>, <code>text/csv</code>, <code>text/x-csv</code>, <code>application/vnd.ms-excel</code> and more. However, the file signature will usually return <code>text/plain</code>. SIPI tries to cope with these ambiguities.</p>"},{"location":"lua/","title":"SIPI Lua Interface","text":"<p>SIPI has an embedded LUA interpreter. LUA is a simple script language that was developped specifically to be embedded into applications. For example the games minecraft and World of Warcraft make extensive use of LUA scripting for customization and programming extensions.</p> <p>Each HTTP request to SIPI invokes a recent, independent lua-instance (Version 5.3.5). Therefore, LUA may be used in the following contexts:</p> <ul> <li>Preflight function</li> <li>Embedded in HTML pages</li> <li>RESTful services using the SIPI routing</li> </ul> <p>Each lua-instance in SIPI includes additional SIPI-specific information:</p> <ul> <li>global variables about the SIPI configuration</li> <li>information about the current HTTP request</li> <li>SIPI specific functions for</li> <li>processing the request and send back information</li> <li>getting image information and transforming images</li> <li>querying and changing the SIPI runtime configuration (e.g. the cache)</li> </ul> <p>In general, the SIPI LUA function make use that a Lua function's return value may consist of more than one element (see Multiple Results):</p> <p>Sipi provides the LuaRocks package manager which must be used in the context of SIPI.</p> <p>The Lua interpreter in Sipi runs in a multithreaded environment: each request runs in its own thread and has its own Lua interpreter. Therefore, only Lua packages that are known to be thread-safe may be used!</p>"},{"location":"lua/#preflight-function","title":"Preflight function","text":"<p>It is possible to define a LUA pre-flight function for IIIF-requests and independently one for file-requests (indicated by a /file postfix in the URL). Both are optional and are best located in the init-script (see configuarion options of SIPI). It is executed after the incoming HTTP request data has been processed but before an action to respond to the request has been taken. It should be noted that the pre-flight script is only executed for IIIF-specific requests (either using the IIIF URL-syntax or the /file postfix). All other HTTP requests are being directed to \"normal\" HTTP-server part of SIPI. These can utilize the lua functionality by embedding LUA commands within the HTML.</p>"},{"location":"lua/#iiif-preflight-function","title":"IIIF preflight function","text":"<p>The IIIF preflight function must have the name pre_flight with the following signature:</p> <pre><code>function pre_flight(prefix,identifier,cookie)\n\n    return \"allow\", filepath\nend\n</code></pre> <p>The preflight function takes 3 parameter:</p> <ul> <li><code>prefix</code>: This is the prefix that is given on the IIIF url [mandatory] http(s)://{server}/{prefix}/{id}/{region}/{size}/{rotation}/{quality}.{format}   Please note that the prefix may contain several \"/\" that can be used as path to the repository file</li> <li><code>identifier</code>: The image identifier (which must not correspond to an actual filename in the media files repositoy   of the SIPI IIIF server)   [mandatory]</li> <li><code>cookie</code>: A cookie containing authorization information. Usually the cookie contains a Json Web Token [optional]</li> </ul> <p>The pre-flight function must return at least 2 parameters:</p> <ul> <li><code>permission</code>: A string or a table indication the permission to read the image. In a simple case it's either the   string <code>\"allow\"</code> or <code>\"deny\"</code>.   To allow more flexibility, the following permission tables are supported:  <ul> <li>Restricted access with watermark. The watermark must be a TIFF file with a single 8-bit channel (gray value image). For example: <code>{ type = 'restrict', watermark = './wm/mywatermark.tif' }</code></li> <li>Restricted access with size limitation. The size must be a   IIIF size expression. For example: <code>{ type = 'restrict', size='!256,256' }</code></li> <li>SIPI also supports the IIIF Authentification API. See section IIIF   Authentification on how to implement this feature in the pre-flight function.</li> </ul> </li> <li><code>filepath</code>: The path to the master image file in the media files repository. This path can be assembled using the   <code>prefix</code> and <code>identifier</code> using any additional information (e.g. accessing a database or using the LUA restful client)</li> </ul> <p>The most simple working pre-flight looks as follows assuming that the <code>identifier</code>is the name of the master image file in the repository and the <code>prefix</code> is the path:</p> <pre><code>function pre_flight(prefix, identifier, cookie)\n    if config.prefix_as_path then\n        filepath = config.imgroot .. '/' .. prefix .. '/' .. identifier\n    else\n        filepath = config.imgroot .. '/' .. identifier\n    end\n    return 'allow', filepath\nend\n</code></pre> <p>Above example preflight function allows all files to be served without restriction.</p>"},{"location":"lua/#more-complex-example-of-preflight-function","title":"More complex example of preflight function","text":"<p>The following example uses some SIPI lua funtions to access an authorization server to check if the user (identified by a cookie) is allowed to see the specific image. We are using Json Web Tokens (JWT) which are supported by SIPI specific LUA functions. Please note that the SIPI JTW-functions support an arbitrary payload that has not to follow the JWT recommendations. In order to encode, the JWT_ALG_HS256 is beeing used together with the key that is defined in the SIPI configuration as jwt_secret.</p> <pre><code>function pre_flight(prefix, identifier, cookie) \n    --\n    -- make up the file path\n    --\n    if config.prefix_as_path then\n        filepath = config.imgroot .. '/' .. prefix .. '/' .. identifier\n    else\n        filepath = config.imgroot .. '/' .. identifier\n    end\n    --\n    -- we need a cookie containing the user information that will be\n    -- sent to the authorization server. In this\n    -- example, the content does not follow the JWT rules\n    -- (which is possible to pack any table into a JWT encoded token)\n    --\n    if cookie then\n        --\n        -- we decode the cookie in order to get a table of key/value pairs\n        --\n        success, userinfo = server.decode_jwt(cookie)\n        if not success then\n            return 'deny', filepath\n        end\n        --\n        -- prepare the RESTful call to the authorization server\n        --\n\n        -- add the image identifier to the info table:\n        userinfo[\"imgid\"] = identifier\n        -- encode the userinfo to a JWT-like token:\n        local new_cookie = server.generate_jwt(userinfo) \n        local url = 'http://auth.institution.org/api/getauth/' .. identifier\n        local auth_information = { Cookie = new_cookie }\n        --\n        -- make the HTTP request with a timeout of 500 ms\n        --\n        success, result = server.http('GET', url, auth_information, 500) \n        if success then\n            --\n            -- we got a response from the server\n            --\n            success, response_json = server.json_to_table(result.body)\n            if success then  -- everything OK\n                return {\n                            type = response_json.type,\n                            restriction = response_json.restriction\n                        }, filepath\n            else\n                return 'deny', filepath\n            end\n        else\n            return 'deny', filepath\n        end\n    else\n        return 'deny', filepath\n    end\nend\n</code></pre> <p>Above example assumes that the cookie data is a string that contains encrypted user data from a table (key/value pair). Jason Web Token. This token is decoded and the information about the image to be displayed is added. Then the information is encoded as a new token that ist transmitted to the RESTful interface of the authentification server. The answer is assumed to be json containing information about the type ('allow', 'deny', 'restrict') and the restriction settings. The pre-flight function uses the following SIPI-specific LUA global variables and function:</p> <ul> <li>config.imgroot: (Global variable) Root directory of the image repository.</li> <li>server.http(): (Function) Used to create a RESTful GET request.</li> <li>server.generate_jwt(): (Function) Create a new JWT token from a key/value table.</li> <li>server.json_to_table(): (function) Convert a JSON into a LUA table.</li> </ul>"},{"location":"lua/#file-preflight-function","title":"File preflight function","text":"<p>An URL in the form <code>http(s)://{server}/{prefix}/{identifier}/file</code> serves the given file as binary object (including propere mimetype in the header etc.). The file has to reside in the directory tree defined for IIIF requests. In these cases, a preflight script name <code>file_pre_flight</code> is being called if defined. Its signature is as follows:</p> <pre><code>function file_pre_flight(filepath, cookie)\n\nend\n</code></pre> <p>A simple example allowing access only to the file \"unit/test.csv\" would be:</p> <pre><code>function file_pre_flight(filepath, cookie)\n    if filepath == \"./images/unit/test.csv\" then\n        return \"allow\", filepath\n    else\n        return \"deny\", \"\"\n    end\nend\n</code></pre> <p>This script would deny all other file access and the SIPI IIIF server responds with a <code>401 Unauthorized</code> error.</p>"},{"location":"lua/#lua-embedded-in-html","title":"LUA embedded in HTML","text":"<p>The HTTP server that is included in SIPI can serve any type of file which are just transfered as is to the client. However, if a file has an extension of <code>.elua</code>, it is assumed to be a HTML file with embedded LUA code. ALL SIPI-specific LUA functions and global variables are available.</p> <p>Embedding works with the special tag <code>&lt;lua&gt;</code> and <code>&lt;/lua&gt;</code>. All text between the opening and closing tag is interpreted as LUA code. SIPI provides an extra LUA function to output data to the client (server.print). Thus, dynamic, server-generated HTML may be created. A sample page that displays some information about the server configuration and client info could like follows:</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;SIPI Configuration Info&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;h1&gt;SIPI Configuration Info&lt;/h1&gt;\n    &lt;h2&gt;Configuration variables&lt;/h2&gt;\n    &lt;table&gt;\n        &lt;tr&gt;\n            &lt;td&gt;imgroot&lt;/td&gt;\n            &lt;td&gt;:&lt;/td&gt;\n            &lt;td&gt;&lt;lua&gt;server.print(config.imgroot)&lt;/lua&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;docroot&lt;/td&gt;\n            &lt;td&gt;:&lt;/td&gt;\n            &lt;td&gt;&lt;lua&gt;server.print(server.docroot)&lt;/lua&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;hostname&lt;/td&gt;\n            &lt;td&gt;:&lt;/td&gt;\n            &lt;td&gt;&lt;lua&gt;server.print(config.hostname)&lt;/lua&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;scriptdir&lt;/td&gt;\n            &lt;td&gt;:&lt;/td&gt;\n            &lt;td&gt;&lt;lua&gt;server.print(config.scriptdir)&lt;/lua&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;cachedir&lt;/td&gt;\n            &lt;td&gt;:&lt;/td&gt;\n            &lt;td&gt;&lt;lua&gt;server.print(config.cache_dir)&lt;/lua&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;tmpdir&lt;/td&gt;\n            &lt;td&gt;:&lt;/td&gt;\n            &lt;td&gt;&lt;lua&gt;server.print(config.tmpdir)&lt;/lua&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;port&lt;/td&gt;\n            &lt;td&gt;:&lt;/td&gt;\n            &lt;td&gt;&lt;lua&gt;server.print(config.port)&lt;/lua&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;lua&gt;\n            if server.has_openssl then\n                server.print('&lt;tr&gt;&lt;td&gt;SSL port&lt;/td&gt;&lt;td&gt;:&lt;/td&gt;&lt;td&gt;' ..\n                             config.sslport .. '&lt;/td&gt;&lt;/tr&gt;')\n            end\n        &lt;/lua&gt;\n        &lt;tr&gt;\n            &lt;td&gt;number of threads:&lt;/td&gt;\n            &lt;td&gt;:&lt;/td&gt;\n            &lt;td&gt;&lt;lua&gt;server.print(config.n_threads)&lt;/lua&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;maximal post size:&lt;/td&gt;\n            &lt;td&gt;:&lt;/td&gt;\n            &lt;td&gt;&lt;lua&gt;server.print(config.max_post_size)&lt;/lua&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/table&gt;\n    &lt;h2&gt;Client information&lt;/h2&gt;\n    &lt;table&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Host in request&lt;/td&gt;\n            &lt;td&gt;:&lt;/td&gt;\n            &lt;td&gt;&lt;lua&gt;server.print(server.host)&lt;/lua&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;IP of client&lt;/td&gt;\n            &lt;td&gt;:&lt;/td&gt;\n            &lt;td&gt;&lt;lua&gt;server.print(server.client_ip)&lt;/lua&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;URL path&lt;/td&gt;\n            &lt;td&gt;:&lt;/td&gt;\n            &lt;td&gt;&lt;lua&gt;server.print(server.uri)&lt;/lua&gt;&lt;/td&gt;\n            &lt;/tr&gt;\n    &lt;/table&gt;\n\n    &lt;p&gt;Important Note: \"IP of client\" and \"Host in request\" may\n       indicate the information of a proxy and notof the actual\n       client!&lt;/p&gt;\n    &lt;h2&gt;Request Header Information&lt;/h2&gt;\n    &lt;table&gt;\n        &lt;lua&gt;\n            for key, val in pairs(server.header) do\n                server.print('&lt;tr&gt;&lt;td&gt;' .. key ..\n                             '&lt;/td&gt;&lt;td&gt;:&lt;/td&gt;&lt;td&gt;' .. val .\n                             '&lt;/td&gt;&lt;/tr&gt;')\n            end\n        &lt;/lua&gt;\n    &lt;/table&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"lua/#embedded-lua-and-enforcing-ssl","title":"Embedded LUA and enforcing SSL","text":"<p>The supplied example initialization file offers a LUA function that enforces the use of a SSL encryption page proteced by a user name and password. It is used as follows by adding the following code before the <code>&lt;html&gt;</code> opening tag:</p> <pre><code>&lt;lua&gt;\n    if server.secure then\n        protocol = 'https://'\n    else\n        protocol = 'http://'\n    end\n\n    success,token = authorize_page('admin.sipi.org',\n                                   'administrator',\n                                    extecteduser, expectedPassword)\n    if not success then\n        return\n    end\n&lt;/lua&gt;\n</code></pre> <p>where <code>expectedUser</code> and <code>extectedPassword</code> are the user/password combination the user is expected to enter.</p>"},{"location":"lua/#file-uploads-to-sipi","title":"File uploads to SIPI","text":"<p>The SIPI specific LUA function allow the upload of files using POST requests with <code>multipart/form-data</code> content. The global variable <code>server.uploads</code> contains`the information about the uploads. The following variables and function help to deal with uploads:</p> <ul> <li>server.uploads : information about the files in the upload request.</li> <li>server.copyTmpfile : copies a fie from the upload location to the destination directory.</li> </ul> <p>In addition the file system functions that SIPI provides may be used.</p> <p>See the scripts <code>upload.elua</code> and <code>do-upload.elua</code> in the server directory, and <code>upload.lua</code> in the scripts directory for a working example.</p>"},{"location":"lua/#restful-api-and-custom-routes","title":"RESTful API and custom routes","text":"<p>Custom routes to implement a RESTful API can be defined in Sipi's configuration file using the <code>routes</code> configuration variable. For example:</p> <pre><code>routes = {\n    {\n        method = 'GET',\n        route = '/status',\n        script = 'get_repository_status.lua'\n    },\n    {\n        method = 'POST',\n        route = '/make_thumbnail',\n        script = 'make_image_thumbnail.lua'\n    }\n}\n</code></pre> <p>Sipi looks for these scripts in the directory specified by <code>scriptdir</code> in its configuration file. The first route that matches the beginning of the requested URL path will be used.</p>"},{"location":"lua/#iiif-authentication-api-10-in-sipi","title":"IIIF Authentication API 1.0 in SIPI","text":"<p>The <code>pre_flight</code> function is also responsible for activating the IIIF Auth API. In order to do so, the pre_flight script returns a table that contains all necessary information. For details about the IIIF Authentication API 1.0 see the IIIF documentation. The following fields have to be returned by the <code>pre_flight</code>-function as LUA-table:</p> <ul> <li><code>type</code>: String giving the type. Valid are: <code>\"login\"</code>, <code>\"clickthrough\"</code>, <code>\"\"kiosk\"</code> or <code>\"external\"</code>.</li> <li><code>cookieUrl</code>: URL where to get a valid IIIF Auth cookie for this service.</li> <li><code>tokenUrl</code>: URL where to get a valid IIIF Auth token for this service.</li> <li><code>confirmLabel</code>: Label to display in confirmation box.</li> <li><code>description</code>: Description for login window.</li> <li><code>failureDescription</code>: Information, if login fails.</li> <li><code>failureHeader</code>: Header for failure window.</li> <li><code>header</code>: Header of login window</li> <li><code>label</code>: Label of the login window</li> </ul> <p>In addition, the filepath has to be returns. A full response may look as follows:</p> <pre><code>return {\n   type = 'login',\n    cookieUrl = 'https://localhost/iiif-cookie.html',\n    tokenUrl = 'https://localhost/iiif-token.php',\n    confirmLabel =  'Login to SIPI',\n    description = 'This Example requires a demo login!',\n    failureDescription = '&lt;a href=\"http://example.org/policy\"&gt;Access Policy&lt;/a&gt;',\n    failureHeader = 'Authentication Failed',\n    header = 'Please Log In',\n    label = 'Login to SIPI',\n}, filepath\n</code></pre> <p>SIPI will use this information returned by the <code>pre_flight</code> function to return the appropriate responses to the client requests based on the IIIF Authentication API 1.0. Check for support of the IIIF Authentication API 1.0 for mirador and universalviewer, both applications which suppport the IIIF standards.</p>"},{"location":"lua/#sipi-variables-available-to-lua-scripts","title":"SIPI variables available to Lua scripts","text":"<p>There are many globally accessible LUA variables made available which reflext the configuration of SIPI and the state of the server and request. This variables a read only and created for every request.</p>"},{"location":"lua/#sipi-configuration-variables","title":"SIPI configuration variables","text":"<p>This variables are defined ither in the configuration file if SIPI, in environemt variables at startup or as command line option when starting the server.</p>"},{"location":"lua/#confighostname","title":"config.hostname","text":"<pre><code>config.hostname\n</code></pre> <p>The hostname  SIPI is configures to run on (see hostname in configuration description).</p>"},{"location":"lua/#configport","title":"config.port","text":"<pre><code>config.port\n</code></pre> <p>Portnumber where the SIPI server listens (see serverport in configuration description).</p>"},{"location":"lua/#configsslport","title":"config.sslport","text":"<pre><code>config.sslport\n</code></pre> <p>Portnumber for SSL connections of SIPI (see sslport in configuration description).</p>"},{"location":"lua/#configimgroot","title":"config.imgroot","text":"<pre><code>config.imgroot\n</code></pre> <p>Root directory for IIIF-served images (see imgroot in configuration description).</p>"},{"location":"lua/#configdocroot","title":"config.docroot","text":"<pre><code>config.docroot\n</code></pre> <p>Root directory for WEB-Server (see docroot in configuration description).</p>"},{"location":"lua/#configmax_temp_file_age","title":"config.max_temp_file_age","text":"<pre><code>config.max_temp_file_age\n</code></pre> <p>maximum age of temporary files (see max_temp_file_age in configuration description).</p>"},{"location":"lua/#configprefix_as_path","title":"config.prefix_as_path","text":"<pre><code>config.prefix_as_path`\n</code></pre> <p><code>true</code> if the prefix should be used as path info (see prefix_as_path in configuration description).</p>"},{"location":"lua/#configinit_script","title":"config.init_script","text":"<pre><code>config.init_script\n</code></pre> <p>Path to initialization script (see initscript in configuration description).</p>"},{"location":"lua/#configscriptdir","title":"config.scriptdir","text":"<pre><code>config.scriptdir\n</code></pre> <p>Path to script directory. (see scriptdir in configuration description).</p>"},{"location":"lua/#configcache_dir","title":"config.cache_dir","text":"<pre><code>config.cache_dir\n</code></pre> <p>Path to cache directory for iIIF served images. (see cachedir in configuration description).</p>"},{"location":"lua/#configcache_size","title":"config.cache_size","text":"<pre><code>config.cache_size\n</code></pre> <p>Maximal size of cache (see cachesize in configuration description).</p>"},{"location":"lua/#configcache_n_files","title":"config.cache_n_files","text":"<pre><code>config.cache_n_files\n</code></pre> <p>Maximal number of files in cache. (see cache_nfiles in configuration description).</p>"},{"location":"lua/#configcache_hysteresis","title":"config.cache_hysteresis","text":"<pre><code>config.cache_hysteresis\n</code></pre> <p>Amount of data to be purged if cache reaches maximum size. (see cache_hysteresis in configuration description).</p>"},{"location":"lua/#configjpeg_quality","title":"config.jpeg_quality","text":"<pre><code>config.jpeg_quality\n</code></pre> <p>Unfortunately, the IIIF Image API does not allow to give a JPEG quality (=compression) on the IIIF URL. SIPI allows to configure the compression quality system wide with this parameter. Allowed values are in he range [1..100] where 1 the worst quality (and highest compression factor = smallest file size) and 100 the highest quality (with lowest compression factor = biggest file size). Please note that SIPI is not able to provide lossless compression for JPEG files. (see jpeg_quality in configuration description).</p>"},{"location":"lua/#configkeep_alive","title":"config.keep_alive","text":"<pre><code>config.keep_alive\n</code></pre> <p>Maximal keep-alive time for HTTP requests that ask for a keep-alive connection. (see keep_alive in configuration description).</p>"},{"location":"lua/#configthumb_size","title":"config.thumb_size","text":"<pre><code>config.thumb_size\n</code></pre> <p>Default thumbnail image size. (see thumb_size in configuration description).</p>"},{"location":"lua/#confign_threads","title":"config.n_threads","text":"<pre><code>config.n_threads\n</code></pre> <p>Number of worker threads SIPI uses. (see nthreads in configuration description).</p>"},{"location":"lua/#configmax_post_size","title":"config.max_post_size","text":"<pre><code>config.max_post_size\n</code></pre> <p>Maximal size of POST data allowed (see max_post_size in configuration description).</p>"},{"location":"lua/#configtmpdir","title":"config.tmpdir","text":"<pre><code>config.tmpdir\n</code></pre> <p>Temporary directory to store uploads. (see tmpdir in configuration description).</p>"},{"location":"lua/#configssl_certificate","title":"config.ssl/_certificate","text":"<pre><code>config.ssl_certificate\n</code></pre> <p>Path to the SSL certificate that SIPI uses. (see ssl_certificate in configuration description).</p>"},{"location":"lua/#configssl_key","title":"config.ssl/_key","text":"<pre><code>config.ssl_key\n</code></pre> <p>Path to the SSL key that SIPI uses. (see ssl_key in configuration description).</p>"},{"location":"lua/#configlogfile","title":"config.logfile","text":"<pre><code>config.logfile\n</code></pre> <p>Name of the logfile. SIPI is currently using the built-in logger which logs to stdout and the logfile name is ignored.  (see logfile in configuration description).</p>"},{"location":"lua/#configloglevel","title":"config.loglevel","text":"<pre><code>config.loglevel\n</code></pre> <p>Indicates what should be logged. The variable contains a integer that corresponds to the syslog level. (see loglevel in configuration description).</p>"},{"location":"lua/#configadminuser","title":"config.adminuser","text":"<pre><code>config.adminuser\n</code></pre> <p>Name of admin user. (see user in configuration description).</p>"},{"location":"lua/#configpassword","title":"config.password","text":"<pre><code>config.password\n</code></pre> <p>Password (plain text, not encrypted) of admin user (use with caution)! (see password in configuration description).</p>"},{"location":"lua/#sipi-server-variables","title":"SIPI Server Variables","text":"<p>Sipi server variables are dependent on the incoming request and are created by SIPI automatically for each request.</p>"},{"location":"lua/#servermethod","title":"server.method","text":"<pre><code>server.method\n</code></pre> <p>The HTTP request method. Is one of <code>OPTIONS</code>, <code>GET</code>, <code>HEAD</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, <code>TRACE</code>, <code>CONNECT</code> or <code>OTHER</code>.</p>"},{"location":"lua/#serverhas_openssl","title":"server.has_openssl","text":"<pre><code>server.has_openssl\n</code></pre> <p><code>true</code> if OpenSSL is available. This variable is determined compilation time. Usually SSL should be included, but SIPI can be compiled without SSL support. There is no option in the configuration file for this.</p>"},{"location":"lua/#serversecure","title":"server.secure","text":"<pre><code>server.secure\n</code></pre> <p><code>true</code> if the connection was made over HTTPS using SSL.</p>"},{"location":"lua/#serverhost","title":"server.host","text":"<pre><code>server.host\n</code></pre> <p>The hostname of the Sipi server that was used in the request.</p>"},{"location":"lua/#serverclient_ip","title":"server.client_ip","text":"<pre><code>server.client_ip\n</code></pre> <p>The IPv4 or IPv6 address of the client connecting to Sipi.</p>"},{"location":"lua/#serverclient_port","title":"server.client_port","text":"<pre><code>server.client_port\n</code></pre> <p>The port number of the client socket.</p>"},{"location":"lua/#serveruri","title":"server.uri","text":"<pre><code>server.uri\n</code></pre> <p>The URL path used to access Sipi (does not include the hostname).</p>"},{"location":"lua/#serverheader","title":"server.header","text":"<pre><code>server.header\n</code></pre> <p>A table containing all the HTTP request headers(in lowercase).</p>"},{"location":"lua/#servercookies","title":"server.cookies","text":"<pre><code>server.cookies\n</code></pre> <p>A table of the cookies that were sent with the request.</p>"},{"location":"lua/#serverget","title":"server.get","text":"<pre><code>server.get\n</code></pre> <p>A table of GET request parameters.</p>"},{"location":"lua/#serverpost","title":"server.post","text":"<pre><code>server.post\n</code></pre> <p>A table of POST or PUT request parameters.</p>"},{"location":"lua/#serverrequest","title":"server.request","text":"<pre><code>server.request\n</code></pre> <p>All request parameters.</p>"},{"location":"lua/#servercontent","title":"server.content","text":"<pre><code>server.content\n</code></pre> <p>If the request had a body, the variable contains the body data. Otherwise it's <code>nil</code>.</p>"},{"location":"lua/#servercontent_type","title":"server.content_type","text":"<pre><code>server.content_type\n</code></pre> <p>Returns the content type of the request. If there is no type or no content, this variable is <code>nil</code>.</p>"},{"location":"lua/#serveruploads","title":"server.uploads","text":"<pre><code>server.uploads\n</code></pre> <p>This is an array of upload parameters, one per file. Each one is a table containing:</p> <ul> <li><code>fieldname</code>: the name of the form field.</li> <li><code>origname</code>: the original filename.</li> <li><code>tmpname</code>: a temporary path to the uploaded file.</li> <li><code>mimetype</code>: the MIME type of the uploaded file as provided by the browser.</li> <li><code>filesize</code>: the size of uploaded file in bytes.</li> </ul> <p>The upload can be accessed as follows:</p> <pre><code>for index, value in pairs(server.uploads) do\n    --\n    -- copy the uploaded file to the image repository using the original name\n    --\n    server.copyTmpfile(index, config.imgdir .. '/' .. value[\"origname\"])\nend\n</code></pre>"},{"location":"lua/#knora-specific-variables","title":"Knora-specific variables","text":"<p>The development of SIPI came out of the need to have a flexible, high performance IIIF server for the Swiss National research infrastructure Data and Service Center for the Humanities (DaSCH). The aim of the DaSCH is to guarantee long-term accessibility of research data from the Humanities. The operates a specialized platform Knora. The following variables are for internal use only.</p>"},{"location":"lua/#configknora_path","title":"config.knora_path","text":"<pre><code>config.knora_path\n</code></pre> <p>Path to knora REST API (only for SIPI used with Knora)</p>"},{"location":"lua/#configknora_port","title":"config.knora_port","text":"<pre><code>config.knora_port\n</code></pre> <p>Port that the Knora API uses</p>"},{"location":"lua/#sipi-functions-available-to-lua-scripts","title":"SIPI functions available to Lua scripts","text":"<p>Sipi provides the following functions that can be called from Lua scripts. Each function returns two values. The first value is <code>true</code> if the operation succeeded, <code>false</code> otherwise. If the operation succeeded, the second value is the result of the operation, otherwise it is an error message.</p>"},{"location":"lua/#sipi-connection-functions","title":"SIPI Connection Functions","text":"<p>These LUA function alter the way the HTTP connection is handled.</p>"},{"location":"lua/#serversetbuffer","title":"server.setBuffer","text":"<pre><code>success, errmsg = server.setBuffer([bufsize][,incsize])\n</code></pre> <p>Activates the the connection buffer. Optionally the buffer size and increment size can be given. Returns <code>true, nil</code> on success or <code>false, errormsg</code> on failure.</p>"},{"location":"lua/#serversendheader","title":"server.sendHeader","text":"<pre><code>success, errormsg = server.sendHeader(key, value)\n</code></pre> <p>Sets an HTTP response header. Returns <code>true, nil</code> on success or <code>false, errormsg</code> on failure.</p>"},{"location":"lua/#serversendcookie","title":"server.sendCookie","text":"<pre><code>success, errormsg = server.sendCookie(key, value [, options-table])\n</code></pre> <p>Sets a cookie in the HTTP response. Returns <code>true, nil</code> on success or <code>false, errormsg</code> on failure. The optional <code>options-table</code> is a Lua table containing the following keys:</p> <ul> <li><code>path</code></li> <li><code>domain</code></li> <li><code>expires</code> (value in seconds)</li> <li><code>secure</code> (boolean)</li> <li><code>http_only</code> (boolean)</li> </ul>"},{"location":"lua/#serversendstatus","title":"server.sendStatus","text":"<pre><code>server.sendStatus(code)\n</code></pre> <p>Sends an HTTP status code. This function is always successful and returns nothing.</p>"},{"location":"lua/#serverprint","title":"server.print","text":"<pre><code>success, errormsg = server.print(values)\n</code></pre> <p>Prints variables and/or strings over the HTTP connection to the client that originated the request. Returns <code>true, nil</code> on success or <code>false, errormsg</code> on failure.</p>"},{"location":"lua/#serverrequireauth","title":"server.requireAuth","text":"<pre><code>success, table = server.requireAuth()\n</code></pre> <p>This function retrieves HTTP authentication data that was supplied after sending a <code>'WWW-Authenticate'</code>-header (e.g. by issuing a the following commands to enter the HTTP login dialog:</p> <pre><code>    server.setBuffer()\n    server.sendStatus(401);\n    server.sendHeader('WWW-Authenticate', 'Basic realm=\"Sipi\"')\n</code></pre> <p>It returns <code>true, table</code> on success or <code>false, errormsg</code> on failure. The result of the authorization is returned as table with the following elements:</p> <ul> <li><code>status</code>: Either <code>BASIC</code>, <code>BEARER</code>, <code>NOAUTH</code> (no authorization header) or <code>ERROR</code></li> <li><code>username</code>: A string containing the supplied username (only existing if stats is <code>BASIC</code>)</li> <li><code>password</code>: A string containing the supplied password (only existing if stats is <code>BASIC</code>)</li> <li><code>token</code>: A string containing the raw token information (only if status <code>BEARER</code>)</li> <li><code>message</code>: A string containing the error message (only if status <code>ERROR</code>)</li> </ul> <p>Example:</p> <pre><code>success, auth = server.requireAuth()\nif not success then\n    server.sendStatus(501)\n    server.print(\"Error in getting authentication scheme!\")\n    return -1\nend\n\nif auth.status == 'BASIC' then\n    --\n    -- everything OK, let's create the token for further\n    -- calls and ad it to a cookie\n    --\n    if auth.username == config.adminuser and\n       auth.password == config.password then\n        tokendata = {\n            iss = \"sipi.unibas.ch\",\n            aud = \"knora.org\",\n            user = auth.username\n        }\n        success, token = server.generate_jwt(tokendata)\n        if not success then\n            server.sendStatus(501)\n            server.print(\"Could not generate JWT!\")\n            return -1\n        end\n        success, errormsg = server.sendCookie('sipi',\n                                              token,\n                                              {path = '/', expires = 3600})\n        if not success then\n            server.sendStatus(501)\n            server.print(\"Couldn't send cookie with JWT!\")\n            return -1\n        end\n    else\n        server.sendStatus(401)\n        server.sendHeader('WWW-Authenticate', 'Basic realm=\"Sipi\"')\n        server.print(\"Wrong credentials!\")\n        return -1\n    end\nelseif auth.status == 'BEARER' then\n    success, jwt = server.decode_jwt(auth.token)\n    if not success then\n        server.sendStatus(501)\n        server.print(\"Couldn't deocde JWT!\")\n        return -1\n    end\n    if (jwt.iss ~= 'sipi.unibas.ch') or\n       (jwt.aud ~= 'knora.org') or\n       (jwt.user ~= config.adminuser) then\n        server.sendStatus(401)\n        server.sendHeader('WWW-Authenticate', 'Basic realm=\"Sipi\"')\n        return -1\n    end\nelseif auth.status == 'NOAUTH' then\n    server.setBuffer()\n    server.sendStatus(401);\n    server.sendHeader('WWW-Authenticate', 'Basic realm=\"Sipi\"')\n    return -1\nelse\n    server.status(401)\n    server.sendHeader('WWW-Authenticate', 'Basic realm=\"Sipi\"')\n    return -1\nend\n</code></pre>"},{"location":"lua/#sipi-file-system-function","title":"SIPI File System Function","text":"<p>These functions offer tools to manipuale files and directories, and to gather file information.</p>"},{"location":"lua/#serverfsftype","title":"server.fs.ftype","text":"<pre><code>success, filetype = server.fs.ftype(filepath)\n</code></pre> <p>Checks the filetype of a given filepath. Returns either <code>true, filetype</code> (with filetype one of <code>\"FILE\"</code>, <code>\"DIRECTORY\"</code>, <code>\"CHARDEV\"</code>, <code>\"BLOCKDEV\"</code>, <code>\"LINK\"</code>, <code>\"SOCKET\"</code> or <code>\"UNKNOWN\"</code>) or <code>false, errormsg</code>.</p>"},{"location":"lua/#serverfsmodtime","title":"server.fs.modtime","text":"<pre><code>success, modtime = server.fs.modtime(filepath)\n</code></pre> <p>Retrieves the last modification date of a file in seconds since epoch UTC. Returns either <code>true</code>, <code>modtime</code> or <code>false</code>, <code>errormsg</code>.</p>"},{"location":"lua/#serverfsis_readable","title":"server.fs.is_readable","text":"<pre><code>success, readable = server.fs.is_readable(filepath)\n</code></pre> <p>Checks if a file is readable. Returns <code>true, readable</code> (boolean) on success or <code>false, errormsg</code> on failure.</p>"},{"location":"lua/#serverfsis_writeable","title":"server.fs.is_writeable","text":"<pre><code>success, writeable = server.fs.is_writeable(filepath)\n</code></pre> <p>Checks if a file is writeable. Returns <code>true, writeable</code> (boolean) on success or <code>false, errormsg</code> on failure.</p>"},{"location":"lua/#serverfsis_executable","title":"server.fs.is_executable","text":"<pre><code>success, errormsg = server.fs.is_executable(filepath)\n</code></pre> <p>Checks if a file is executable. Returns <code>true, executable</code> (boolean) on success or <code>false, errormsg</code> on failure.</p>"},{"location":"lua/#serverfsexists","title":"server.fs.exists","text":"<pre><code>success, exists = server.fs.exists(filepath)\n</code></pre> <p>Checks if a file exists. Checks if a file exists. Returns <code>true, exists</code> (boolean) on success or <code>false, errormsg</code> on failure.</p>"},{"location":"lua/#serverfsunlink","title":"server.fs.unlink","text":"<pre><code>success, errormsg = server.fs.unlink(filename)\n</code></pre> <p>Deletes a file from the file system. The file must exist and the user must have write access. Returns <code>true, nil</code> on success or <code>false, errormsg</code> on failure.</p>"},{"location":"lua/#serverfsmkdir","title":"server.fs.mkdir","text":"<pre><code>success, errormsg = server.fs.mkdir(dirname, [tonumber('0755', 8)])\n</code></pre> <p>Creates a new directory, optionally with the specified permissions. Returns <code>true, nil</code> on success or <code>false, errormsg</code> on failure.</p>"},{"location":"lua/#serverfsrmdir","title":"server.fs.rmdir","text":"<pre><code>success, errormsg = server.fs.rmdir(dirname)\n</code></pre> <p>Deletes a directory. Returns <code>true, nil</code> on success or <code>false, errormsg</code> on failure.</p>"},{"location":"lua/#serverfsgetcwd","title":"server.fs.getcwd","text":"<pre><code>success, curdir = server.fs.getcwd()\n</code></pre> <p>Gets the current working directory. Returns <code>true, current_dir</code> on success or <code>false, errormsg</code> on failure.</p>"},{"location":"lua/#serverfsreaddir","title":"server.fs.readdir","text":"<pre><code>success, filenames = server.fs.readdir(dirname)\n</code></pre> <p>Gets the names of the files in a directory, not including <code>.</code> and <code>..</code>. Returns <code>true, table</code> on success or <code>false, errormsg</code> on failure.</p>"},{"location":"lua/#serverfschdir","title":"server.fs.chdir","text":"<pre><code>success, oldir = server.fs.chdir(newdir)\n</code></pre> <p>Change working directory. Returns <code>true, olddir</code> on success or <code>false, errormsg</code> on failure.</p>"},{"location":"lua/#serverfscopyfile","title":"server.fs.copyFile","text":"<pre><code>success, errormsg = server.fs.copyFile(source, destination)\n</code></pre> <p>Copies a file from source to destination. Returns <code>true, nil</code>on success or <code>false, errormsg</code> on failure.</p>"},{"location":"lua/#serverfsmovefile","title":"server.fs.moveFile","text":"<pre><code>success, errormsg = server.fs.moveFile(from, to)\n</code></pre> <p>Moves a file. The move connot cross filesystem boundaries! <code>true, nil</code>on success or <code>false, errormsg</code> on failure.</p>"},{"location":"lua/#other-helper-function","title":"Other Helper Function","text":""},{"location":"lua/#serverhttp","title":"server.http","text":"<pre><code>success, result = server.http(method, \"http://server.domain[:port]/path/file\" [, header] [, timeout])\n</code></pre> <p>Performs an HTTP request using curl. Currently implements only GET requests. Parameters:</p> <ul> <li><code>method</code>: The HTTP request method. Currently must be <code>\"GET\"</code>.</li> <li><code>url</code>: The HTTP URL.</li> <li><code>header</code>: An optional table of key-value pairs representing HTTP     request headers.</li> <li><code>timeout</code>: An optional number of milliseconds until the connection     times out.</li> </ul> <p>Authentication is not yet supported.</p> <p>The result is a table:</p> <pre><code>result = {\n    status_code = value -- HTTP status code returned\n    erromsg = \"error description\" -- only if success is false\n    header = {\n        name = value [, name = value, ...]\n    },\n    certificate = { -- only if HTTPS connection\n        subject = value,\n        issuer = value\n    },\n    body = data,\n    duration = milliseconds\n}\n</code></pre> <p>Example:</p> <pre><code>success, result = server.http(\"GET\", \"http://www.salsah.org/api/resources/1\", 100)\n\nif (result.success) then\n   server.print(\"&lt;table&gt;\")\n   server.print(\"&lt;tr&gt;&lt;th&gt;Field&lt;/th&gt;&lt;th&gt;Value&lt;/th&gt;&lt;/tr&gt;\")\n   for k,v in pairs(server.header) do\n       server.print(\"&lt;tr&gt;&lt;td&gt;\", k, \"&lt;/td&gt;&lt;td&gt;\", v, \"&lt;/td&gt;&lt;/tr&gt;\")\n   end\n   server.print(\"&lt;/table&gt;&lt;hr/&gt;\")\n\n   server.print(\"Duration: \", result.duration, \" ms&lt;br/&gt;&lt;hr/&gt;\")\n   server.print(\"Body:&lt;br/&gt;\", result.body)\nelse\n   server.print(\"ERROR: \", result.errmsg)\nend\n</code></pre>"},{"location":"lua/#servertable_to_json","title":"server.table_to_json","text":"<pre><code>success, jsonstr = server.table\\_to\\_json(table)\n</code></pre> <p>Converts a (nested) Lua table to a JSON string. Returns <code>true, jsonstr</code> on success or <code>false, errormsg</code> on failure.</p>"},{"location":"lua/#serverjson_to_table","title":"server.json_to_table","text":"<pre><code>success, table = server.json_to_table(jsonstr)\n</code></pre> <p>Converts a JSON string to a (nested) Lua table. Returns <code>true, table</code> on success or <code>false, errormsg</code> on failure.</p>"},{"location":"lua/#servergenerate_jwt","title":"server.generate_jwt","text":"<pre><code>success, token = server.generate_jwt(table)\n</code></pre> <p>Generates a JSON Web Token (JWT) with the supplied table as payload. Returns <code>true, token</code> on success or <code>false, errormsg</code> on failure. The internal may contain arbitrary keys and/or may contains the JWT claims as follows. (The type <code>IntDate</code> is a number of seconds since 1970-01-01T0:0:0Z):</p> <ul> <li><code>iss</code> (string =&gt; StringOrURI) OPT: principal that issued the JWT.</li> <li><code>exp</code> (number =&gt; IntDate) OPT: expiration time on or after which     the token MUST NOT be accepted for processing.</li> <li><code>nbf</code> (number =&gt; IntDate) OPT: identifies the time before which     the token MUST NOT be accepted for processing.</li> <li><code>iat</code> (number =&gt; IntDate) OPT: identifies the time at which the     JWT was issued.</li> <li><code>aud</code> (string =&gt; StringOrURI) OPT: identifies the audience that     the JWT is intended for. The audience value is a string, typically     the base address of the resource being accessed, such as     <code>https://contoso.com</code>.</li> <li><code>prn</code> (string =&gt; StringOrURI) OPT: identifies the subject of     the JWT.</li> <li><code>jti</code> (string =&gt; String) OPT: provides a unique identifier for     the JWT.</li> </ul>"},{"location":"lua/#serverdecode_jwt","title":"server.decode_jwt","text":"<pre><code>success, table = server.decode_jwt(token)\n</code></pre> <p>Decodes a JSON Web Token (JWT) and returns its content as table. Returns <code>true, table</code> on success or <code>false, errormsg</code> on failure.</p>"},{"location":"lua/#serverparse_mimetype","title":"server.parse_mimetype","text":"<pre><code>success, mimetype = server.parse_mimetype(str)\n</code></pre> <p>Parses a mimtype HTTP header string and returns a pair containing the actual mimetype and the charset used (if available). It returns <code>true, pair</code> with pair as mimetype and charset on success, <code>false, errormsg</code> on failure.</p>"},{"location":"lua/#serverfile_mimetype","title":"server.file_mimetype","text":"<pre><code>success, table = server.file_mimetype(path)\nsuccess, table = server.file_mimetype(index)\n</code></pre> <p>Determines the mimetype of a file. The first form is used if the file path is known. The second form can be used for uploads by passing the upload file index. It returns <code>true, table</code> on success or <code>false, errormsg</code> on failure. The table has 2 members: - <code>mimetype</code> - <code>charset</code></p>"},{"location":"lua/#serverfile_mimeconsistency","title":"server.file_mimeconsistency","text":"<pre><code>success, is_consistent = server.file_mimeconsistency(path)\nsuccess, is_consistent = server.file_mimeconsistency(index)\n</code></pre> <p>Checks if the file extension and the mimetype determined by the magic of the file is consistent. The first form requires a path (including the filename with extension), the second can be used for checking uploads by  passing the file index. It returns <code>true, is_consistent</code> on success or <code>false, errormsg</code> in case of an error. <code>is_consistent</code> is true if the mimetype corresponds to the file extension.</p>"},{"location":"lua/#servercopytmpfile","title":"server.copyTmpfile","text":"<pre><code>success, errormsg = server.copyTmpfile(from, to)\n</code></pre> <p>Sipi saves each uploaded file in a temporary location (given by the config variable <code>tmpdir</code>) and deletes it after the request has been served. This function is used to copy the file to another location where it can be retrieved later. Returns <code>true, nil</code> on success or <code>false, errormsg</code> on failure.</p> <p>Parameters:</p> <ul> <li><code>from</code>:    an index (integer value) of array server.uploads.</li> <li><code>target</code>:  destination path</li> </ul>"},{"location":"lua/#serversystime","title":"server.systime","text":"<pre><code>systime = server.systime()\n</code></pre> <p>Returns the current system time on the server in seconds since epoch.</p>"},{"location":"lua/#serverlog","title":"server.log","text":"<pre><code>server.log(message, loglevel)\n</code></pre> <p>Writes a message to the built-in logger. Severity levels are:</p> <ul> <li><code>server.loglevel.LOG_EMERG</code></li> <li><code>server.loglevel.LOG_ALERT</code></li> <li><code>server.loglevel.LOG_CRIT</code></li> <li><code>server.loglevel.LOG_ERR</code></li> <li><code>server.loglevel.LOG_WARNING</code></li> <li><code>server.loglevel.LOG_NOTICE</code></li> <li><code>server.loglevel.LOG_INFO</code></li> <li><code>server.loglevel.LOG_DEBUG</code></li> </ul>"},{"location":"lua/#serveruuid","title":"server.uuid","text":"<pre><code>success, uuid = server.uuid()\n</code></pre> <p>Generates a random UUID version 4 identifier in canonical form, as described in RFC 4122. Returns <code>true, uuid</code> on success or <code>false, errormsg</code> on failure.</p>"},{"location":"lua/#serveruuid62","title":"server.uuid62","text":"<pre><code>success, uuid62 = server.uuid62()\n</code></pre> <p>Generates a Base62-encoded UUID. Returns <code>true, uuid62</code> on success or <code>false, errormsg</code> on failure.</p>"},{"location":"lua/#serveruuid_to_base62","title":"server.uuid_to_base62","text":"<pre><code>success, uuid62 = server.uuid_to_base62(uuid)\n</code></pre> <p>Converts a canonical UUID string to a Base62-encoded UUID. Returns <code>true, uuid62</code> on success or <code>false, errormsg</code> on failure.</p>"},{"location":"lua/#serverbase62_to_uuid","title":"server.base62_to_uuid","text":"<pre><code>success, uuid = server.base62_to_uuid(uuid62)\n</code></pre> <p>Converts a Base62-encoded UUID to canonical form. Returns <code>true, uuid</code> on success or <code>false, errormsg</code> on failure.</p>"},{"location":"lua/#installing-lua-modules","title":"Installing Lua modules","text":"<p>To install Lua modules that can be used in Lua scripts, use <code>local/bin/luarocks</code>. Make sure that the location where the modules are stored is in the Lua package path, which is printed by local/bin/lurocks path. The Lua paths will be used by the Lua interpreter when loading modules in a script with <code>require</code> (see Using LuaRocks to install packages in the current directory).</p> <p>For example, using <code>local/bin/luarocks install --local package</code>, the package will be installed in <code>~/.luarocks/</code>. To include this path in the Lua's interpreter package search path, you can use an environment variable. Running <code>local/bin/luarocks path</code> outputs the code you can use to do so. Alternatively, you can build the package path at the beginning of a Lua file by setting <code>package.path</code> and <code>package.cpath</code> (see Running scripts with packages).</p>"},{"location":"running/","title":"Running Sipi","text":"<p>After following the instructions in building, you will find the executable <code>local/bin/sipi</code> in the source tree.</p> <p>It can be run either as simple command-line image converter or as a server.</p>"},{"location":"running/#running-sipi-as-a-command-line-image-converter","title":"Running Sipi As a Command-line Image Converter","text":"<p>Convert an image file to another format:</p> <pre><code>local/bin/sipi --format [output format] --fileIn [input file] [output file]\n</code></pre> <p>Compare two image files:</p> <pre><code>local/bin/sipi --compare file1 file2\n</code></pre>"},{"location":"running/#running-sipi-as-a-server","title":"Running Sipi As a Server","text":"<pre><code>local/bin/sipi --config [config file]\n</code></pre> <p>Sipi logs its operations using syslog.</p>"},{"location":"running/#command-line-options","title":"Command-line Options","text":"<pre><code>Options:\n  --config filename, -c filename\n                    Configuration file for web server.\n\n  --file fileIn, -f fileIn\n                    input file to be converted. Usage: sipi [options] -f fileIn\n                    fileout\n\n  --format Value, -F Value\n                    Output format Value can be: jpx,jpg,tif,png.\n\n  --ICC Value, -I Value\n                    Convert to ICC profile. Value can be:\n                    none,sRGB,AdobeRGB,GRAY.\n\n  --quality Value, -q Value\n                    Quality (compression). Value can any integer between 1 and\n                    100\n\n  --region x,y,w,h, -r x,y,w,h\n                    Select region of interest, where x,y,w,h are integer values\n\n  --Reduce Value, -R Value\n                    Reduce image size by factor Value (cannot be used together\n                    with --size and --scale)\n\n  --size w,h -s w,h\n                    Resize image to given size w,h (cannot be used together with\n                    --reduce and --scale)\n\n  --Scale Value, -S Value\n                    Resize image by the given percentage Value (cannot be used\n                    together with --size and --reduce)\n\n  --skipmeta Value, -k Value\n                    Skip the given metadata. Value can be none,all\n\n  --topleft fileIn fileOut\n                    Enforce orientation TOPLEFT.\n\n  --mirror Value, -m Value\n                    Mirror the image. Value can be: none,horizontal,vertical\n\n  --rotate Value, -o Value\n                    Rotate the image. by degree Value, angle between (0:360)\n\n  --salsah, -s\n                    Special flag for SALSAH internal use\n\n  --compare file1 file2 or -C file1 file2\n                    Compare two files\n\n  --watermark file, -w file\n                    Add a watermark to the image\n\n  --serverport Value, -p Value\n                    Port of the web server\n\n  --nthreads Value, -t Value\n                    Number of threads for web server\n\n  --imgroot Value, -i Value\n                    Root directory containing the images for the web server\n\n  --loglevel Value, -l Value\n                    Logging level Value can be:\n                    DEBUG,INFO,NOTICE,WARNING,ERR,CRIT,ALERT,EMERG\n\n  --help\n                    Print usage and exit.\n</code></pre>"},{"location":"running/#configuration-files","title":"Configuration Files","text":"<p>Sipi's configuration file is written in Lua. You can make your own configuration file by adapting <code>config/sipi.config.lua</code>.</p> <ul> <li>Check that the port number is correct and that your operating     system's firewall does not block it.</li> <li>Set <code>imgroot</code> to the directory containing the files to be served.</li> <li>Create the directory <code>cache</code> in the top-level directory of the     source tree.</li> </ul> <p>For more information, see the comments in <code>config/sipi.config.lua</code>.</p>"},{"location":"running/#using-sipi-with-knora","title":"Using Sipi with Knora","text":"<p>If you are using Sipi with Knora, you can adapt <code>config/sipi.knora-config.lua</code>.</p>"},{"location":"running/#https-support","title":"HTTPS Support","text":"<p>Sipi supports SSL/TLS encryption if the OpenSSL library is installed. You will need to install a certificate; see <code>config/sipi.config.lua</code> for instructions.</p>"},{"location":"running/#iiif-prefixes","title":"IIIF Prefixes","text":"<p>Sipi supports IIIF Image API URLs.</p> <p>If the configuration property <code>prefix_as_path</code> is set to <code>true</code>, the IIIF <code>prefix</code> portion of the URL is interpreted as a subdirectory of <code>imgroot</code>, and Sipi looks for the requested image file in that subdirectory. Otherwise, it looks for the file in <code>imgroot</code>.</p>"},{"location":"sipi/","title":"Basic Information and Reference","text":"<p>This section provides the basic information to use SIPI as a high performance, versatile media server implementing the IIIF standards that can be used in many different settings, from a small standalone server providing basic metadata to the deployment in a complex environment. For more information about the IIIF standard see https://iiif.io. The basic idea is that an image or rectangular region of an image can be downloaded (e.g. to the browser) with a given width and height, rotation, image quality and format. All parameters are provided with the IIIF conformant URL that has the following form:</p> <p><code>http(s)://{server}/{prefix}/{identifier}/{region}/{size}/{rotation}/{quality}.{format}</code></p> <p>The parts do have the following meaning:</p> <ul> <li><code>{server}</code>: The DNS name of the server, eg. <code>iiif.dasch.swiss</code>. The server may include a portnumber,   eg. <code>iiif2.dasch.swiss:8080</code>.</li> <li><code>{prefix}</code>: A path (that may include <code>/</code>'s) to organize the assets. Usually the prefix reflect the internal   directory or folder hierarchy. However this can be overridden using special features of SIPI (see pre-flight-script   and sipi configuration file).</li> <li><code>{identifier}</code>: The identifier of the requested image. By default, it is the filename and its extension.</li> <li><code>{region}</code>: a region of interest that should be displayed. <code>full</code> indicates that the whole image is being requested.   For more details see IIIF regions</li> <li><code>{size}</code>: The size of the displayed image (part). <code>max</code> indicates the the \"natural\" maximal resolution should be used.   For more details see IIIF size</li> <li><code>{rotations}</code>: The image can be rotated and mirrored before being transmitted to the client. SIPI allows for   arbitrary rotations. The Value <code>0</code> indicates no rotation. For more details see   IIIF rotation</li> <li><code>{quality}</code>: The quality parameter determines whether the image is delivered in color, grayscale or black and white.   Valid values are:</li> <li><code>default</code>: the \"natural\" quality of the original image</li> <li><code>color</code>: A color representation</li> <li><code>gray</code>: A gray value representation</li> <li><code>bitonal</code>: A bitonal representation</li> </ul> <p>All quality values are supported by SIPI - <code>{format}</code>: The file format that should be delivered. SIPI supports the following formats, irrelevant on the format   the image as in the repository of SIPI:   - <code>jpg</code>: The image is delivered as JPEG image. Unfortunately the IIIF standard does not allow the dynamic selection      of the compression ratio used in creating the JPEG. However, a server wide rate may be set in the configuration      file.   - <code>tif</code>: The image is delivered as TIFF image.   - <code>png</code>: The image is delivered as PNG image.   - <code>jpx</code>: The image is delivered as JPEG2000 image.</p> <p>NOTE: PDF's are not supported. I consider PDF to be a document format and not to be an image format.</p>"},{"location":"sipi/#the-sipi-executable","title":"The SIPI Executable","text":"<p>The SIPI executable is a statically linked program that can be started as - command line tool to perform image operations, mainly format conversions - as server deamon that provides IIIF conforming media server</p>"},{"location":"sipi/#using-sipi-as-command-line-tool","title":"Using SIPI as Command Line Tool","text":"<p>The SIPI command line mode can be used for the following tasks:</p>"},{"location":"sipi/#format-conversions","title":"Format Conversions:","text":"<pre><code>/path/to/sipi infile outfile [options]\n</code></pre>"},{"location":"sipi/#print-information-about-file-and-metadata","title":"Print Information about File and Metadata:","text":"<pre><code>/path/to/sipi -x infile\n/path/to/sipi --query infile\n</code></pre>"},{"location":"sipi/#compare-two-images-pixelwise","title":"Compare two Images pixelwise","text":"<p>The images may have different formats: if the have exactely the same pixels, they are considered identical). Metadata is ignored for comparison:</p> <pre><code>/path/to/sipi -C file1 file2\n/path/to/sipi --compare file1 file2\n</code></pre>"},{"location":"sipi/#general-options-for-the-command-line-use","title":"General Options for the Command Line Use","text":"<p>In command line mode, SIPI supports the following options:</p> <ul> <li><code>-h</code>, <code>--help</code>: Display a short help with all options available</li> <li><code>-F &lt;fmt&gt;</code>, <code>--format &lt;fmt&gt;</code>: The format of the output file. Valid are <code>jpx</code>, <code>jp2</code>, <code>jpg</code>, <code>png</code> and <code>pdf</code>.</li> <li><code>-I &lt;profile&gt;</code>, <code>--icc &lt;profile&gt;</code>: Convert the outfile to the given ICC color profile. Supported profiles are <code>sRGB</code>,   <code>AdobeRGB</code> and <code>GRAY</code>.</li> <li><code>-q &lt;num&gt;</code>, <code>--quality &lt;num&gt;</code>: Only used for the JPEG format. Ignored for all other formats. Its a number between 1 and   100, where 1 is equivalent to the highest compression ratio and lowest quality, 100 to the lowest compression ration   and highest quality of the output image.</li> <li><code>-n &lt;num&gt;</code>, <code>--pagenum &lt;num&gt;</code>: Only for input files in multi-page PDF format: sets the page that should be converted.   Ignored for all other input file formats.</li> <li><code>-r &lt;x&gt; &lt;y&gt; &lt;nx&gt; &lt;ny&gt;</code>, <code>--region &lt;x&gt; &lt;y&gt; &lt;nx&gt; &lt;ny&gt;</code>: Selects a region of interest that should be converted. Needs   4 integer values: <code>left_upper_corner_X</code>, <code>left_upper_corner_Y</code>, <code>width</code>, <code>height</code>.</li> <li><code>-s &lt;iiif-size&gt;</code>, <code>--size &lt;iif-size&gt;</code>: The size of the resulting image. The option requires a string parameter   formatted according to the size-syntax of IIIF see IIIF-Size. Not giving   this parameters results in having the maximalsize (as the value <code>\"max\"</code>would give).</li> <li><code>-s &lt;num&gt;</code>, <code>--scale &lt;num&gt;</code>: Scaling the image size by the given number (interpreted as percentage). Percentage must   be given as integer value. It may be bigger than 100 to upscale an image.</li> <li><code>-R &lt;num&gt;</code>, <code>--reduce &lt;num&gt;</code>: Reduce the size of the image by the given factor. Thus <code>-R 2</code>would resize the image to   half of the original size. Using <code>--reduce</code> is usually much faster than using <code>--scale</code>, e.g. <code>--reduce 2</code> is faster   than <code>--scale 50</code>.</li> <li><code>-m &lt;val&gt;</code>, <code>--mirror &lt;val&gt;</code>: Takes either <code>horizontal</code> or <code>vertical</code>as parameter to mirror the image appropriately.</li> <li><code>-o &lt;angle&gt;</code>, <code>--rotate &lt;angle&gt;</code>: Rotates the image by the given angle. The angle must be a floating point (or   integer) value between <code>0.0</code>and <code>w60.0</code>.</li> <li><code>-k</code>, <code>--skipmeta</code>: Strip all metadata from inputfile.</li> <li><code>-w &lt;filepath&gt;</code>, <code>--watermark &lt;filepath&gt;</code>: Overlays a watermark to the output image.  must be a single   channel, gray valued TIFF. That is, the TIFF file must have the following tag values: SAMPLESPERPIXEL = 1,   BITSPERSAMPLE = 8, PHOTOMETRIC = PHOTOMETRIC_MINISBLACK."},{"location":"sipi/#jpeg2000-specific-options","title":"JPEG2000 Specific Options","text":"<p>Usually, the SIPI command line tool is used to create JPEG2000 images suitable for a IIIF repository. SIPI supports the following JPEG2000 specific options. For a in detail description of these options consult the kakadu documentation!</p> <ul> <li><code>--Sprofile &lt;profile&gt;</code>: The following JPEG2000 profiles are supported: <code>PROFILE0</code>, <code>PROFILE1</code>, <code>PROFILE2</code>, <code>PART2</code>,   <code>CINEMA2K</code>, <code>CINEMA4K</code>, <code>BROADCAST</code>, <code>CINEMA2S</code>, <code>CINEMA4S</code>, <code>CINEMASS</code>, <code>IMF</code>. Default: <code>PART2</code>.</li> <li><code>--rates &lt;string&gt;</code>: One or more bit-rates (see kdu_compress help!). A value \"-1\" may be used in place of the first   bit-rate in the list to indicate that the final quality layer should include all compressed bits.</li> <li><code>--Clayers &lt;num&gt;</code>:Number of quality layers. Default: 8.</li> <li><code>--Clevels &lt;num&gt;</code>: Number of wavelet decomposition levels, or stages. Default: 8.</li> <li><code>--Corder &lt;val&gt;</code>: Progression order. The four character identifiers have the following interpretation:   L=layer; R=resolution; C=component; P=position. The first character in the identifier refers to the index which   progresses most slowly, while the last refers to the index which progresses most quickly.   Thus must be one of <code>LRCP</code>, <code>RLCP</code>, <code>RPCL</code>, <code>PCRL</code>, <code>CPRL</code>, Default: <code>RPCL</code>.</li> <li><code>--Stiles &lt;string&gt;</code>: Tiles dimensions <code>\"{tx,ty}\"</code>. Default: <code>\"{256,256}\"</code>.</li> <li><code>--Cprecincts &lt;string&gt;</code>: Precinct dimensions <code>\"{px,py}\"</code> (must be powers of 2). Default: <code>\"{256,256}\"</code>.</li> <li><code>--Cblk &lt;string&gt;</code>: Nominal code-block dimensions <code>\"{dx,dy}\"</code>(must be powers of 2, no less than 4 and no greater than 1024,   whose product may not exceed 4096). Default: <code>\"{64,64}\"</code>.</li> <li><code>--Cuse_sop &lt;val&gt;</code>: Include SOP markers (i.e., resync markers). Default: yes.</li> </ul>"},{"location":"sipi/#using-sipi-as-iiif-media-server","title":"Using SIPI as IIIF Media Server","text":"<p>In order to use SIPI as IIIF media server, some setup work has to be done. The configuration of SIPI can be done using a configuration file (that is written in LUA) and/or using environment variables, and/or command line options.</p> <p>The priority is as follows: <code>configuration file parameters</code> are overwritten by <code>environment variables</code> are overwritten by <code>command line options</code>.</p> <p>The SIPI server requires a few directories to be setup and listed in the configuration file. Then the SIPI server is launched as follows:</p> <pre><code>/path/to/sipi --config /path/to/config-file.lua\n</code></pre>"},{"location":"sipi/#sipi-specific-extensions-to-iiif","title":"SIPI specific extensions to IIIF","text":"<p>SIPI implements some backwards compatible, non-standard extensions to the IIIF Image API:</p>"},{"location":"sipi/#access-to-a-raw-files","title":"Access to a raw files","text":"<p>Sometimes it may be usefull to store non-image files such as XML-sidecars, manifests as JSON or complete PDF's, etc. in the same environment as the images. For this reason SIPI supports an extension of the IIIF API:</p> <pre><code>http(s)://{server}/{prefix}/{identifier}/file\n</code></pre> <p>The <code>/file</code>-path at the end of the URL makes SIPI to send the file as it is. Thus, for example a manifest file could be accessed by</p> <pre><code>https://iiif.my.server/images/myimage.json/file\n</code></pre> <p>This works also for PDF's. The URL</p> <pre><code>https://iiif.my.server/images/mydocument.pdf/file\n</code></pre> <p>will download the PDF in toto to be opened by an external viewer or the webapplication.</p> <p>It is possible to use the IIIF-<code>info.json</code> syntax also on non-image files. In this case the <code>info.json</code> has the following format:</p> <pre><code>{\n   \"@context\": \"http://sipi.io/api/file/3/context.json\",\n   \"id\": \"http://localhost:1024/images/test.csv\",\n   \"mimeType\": \"text/comma-separated-values\",\n   \"fileSize\": 327\n}\n</code></pre>"},{"location":"sipi/#setup-of-sipi-directories","title":"Setup of SIPI Directories","text":"<p>SIPI needs the following directories and files setup and accessible (the real names of the directories must be indicated in the configuration file). The following configuration parameters are in the <code>sipi</code>-table of the configuration script:</p> <ul> <li> <p><code>imgroot=path</code>: This is the top-directory of the media file repository. SIPI should at least have read access to it. If   SIPI is used to upload and convert files, it must also have write access. The path may be given as absolute path or   as relative path. Cmdline option: <code>--imgroot</code> Environment variable: <code>SIPI_IMGROOT</code> Default: <code>./images</code></p> </li> <li> <p><code>initscript=path/to/init.lua</code>: SIPI needs a minmal set of LUA functions that can be adapted to the local installation.   These mandatory functions are definied in a init-script (usually it can be found in the config directory where also   the configuration file is located). Cmdline option: <code>--initscript</code> Environment variable: <code>SIPI_INITSCRIPT</code> Default: <code>./config/sipi.init.lua</code></p> </li> <li> <p><code>tmpdir=path</code>: For the support of multipart POST SIPI requires read/write access to a directory to save temporary   files. Cmdline option: <code>--tmpdir</code> Environment variable: <code>SIPI_IMGROOT</code> Default: <code>./tmp</code></p> </li> <li> <p><code>scriptdir=path</code>: Path to the directory where the LUA-scripts for the routes (e.g. RESTful services) can be found. Cmdline option: <code>--scriptdir</code> Environment variable: <code>SIPI_SCRIPTDIR</code> Default: <code>./scripts</code></p> </li> <li> <p><code>cachedir=path</code>: SIPI may optionally use a cache directory to store converted image in order to avoid computationally   intensive conversions if a specific variant is requested several times. Sipi starts with a warning if the cache   directory is defined but not existing. Cmdline option: <code>--cachedir</code> Environment variable: <code>SIPI_CACHEDIR</code> Default: <code>./cache</code></p> </li> </ul> <p>In addition, SIPI can act as a webserver that offers image upload and conversion as web service. In order to use this feature, a server directory has to be defined. This definition ist in the <code>fileserver</code>-table of the configuration file:</p> <ul> <li><code>docroot=path</code>: Path to the document root of the SIPI web server. Cmdline option: <code>--docroot</code> Environment variable: <code>SIPI_DOCROOT</code> Default: <code>./server</code></li> </ul>"},{"location":"sipi/#sipi-configuration-parameters","title":"SIPI Configuration Parameters","text":"<p>The following configuration parameters are used by the SIPI server:</p> <ul> <li> <p><code>hostname=dns-name</code>: The DNS name that SIPI shall show to the outside world. It should be   the dns name the client uses to access the SIPI server (and not internal hostnames by proxies etc.).    Cmdline option: <code>--hostname</code> Environment variable: <code>SIPI_HOSTNAME</code> Default: <code>localhost</code></p> </li> <li> <p><code>port=portnum</code>: Portnumber SIPI should listen on for incoming HTTP requests. Cmdline option: <code>--serverport</code> Environment variable: <code>SIPI_SERVERPORT</code> Default: <code>80</code></p> </li> <li> <p><code>ssl_port=portnum</code>: Portnumber SIPI should listen on for incoming SHTTP requests (using SSL). Cmdline option: <code>--sslport</code> Environment variable: <code>SIPI_SSLPORT</code> Default: <code>443</code></p> </li> <li> <p><code>nthreads=num</code>: Number of worker threads that SIPI allocates. SIPI is a mutlithreaded server and pre-allocates a   given number of working threads that can be configured. Cmdline option: <code>--nthreads</code> Environment variable: <code>SIPI_NTHREADS</code> Default: number of hardware cores as given by <code>std::thread::hardware_concurrency()</code></p> </li> <li> <p><code>prefix_as_path=bool</code>: If <code>true</code>, the prefix is used as path within the image root directory. If false, the prefix   is ignored and it is assumed that all images are directly located in the image root. Cmdline option: <code>--pathprefix</code> Environment variable: <code>SIPI_PATHPREFIX</code> Default: <code>false</code></p> </li> <li> <p><code>ssl_certificate=path</code>: Path to the SSL certificate. Is mandatory if SSL is to be used. Cmdline option: <code>--sslcert</code> Environment variable: <code>SIPI_SSLCERTIFICATE</code> Default: <code>./certificate/certificate.pem</code></p> </li> <li> <p><code>ssl_key=path</code>: Path to the SSL key file. Is mandatory if SSL is to be used. Cmdline option: <code>--sslkey</code> Environment variable: <code>SIPI_SSLKEY</code> Default: <code>./certificate/key.pem</code> <li> <p><code>jwt_secret=string</code>: Shared secret to encode web tokens. Cmdline option: <code>--jwtkey</code> Environment variable: <code>SIPI_JWTKEY</code> Default: <code>UP 4888, nice 4-8-4 steam engine</code></p> </li> <li> <p><code>max_post_size=amount</code>: Maximal size a file upload may have. The amount has the   form \"\" where <code>number</code> is an integer value and <code>type</code>an \"M\" for Megabytes, \"G\" for Gigabytes   and \"\" (empty) for bytes. Cmdline option: <code>--maxpost</code> Environment variable: <code>SIPI_MAXPOSTSIZE</code> Default: <code>300M</code> <li> <p><code>keep_alive</code> : Number of seconds a connection (socket) remains open at maximum (\"keep-alive\"),   if a client requests a \"keep-alive\" connection in the request header. For more information see   Keep-Alive. Cmdline option: <code>--keepalive</code> Environment variable: <code>SIPI_KEEPALIVE</code> Default: <code>5</code></p> </li> <li> <p><code>jpeg_quality=num</code>: Compression parameter when producing JPEG output. Must be a number   between 1 and 100. Unfortunately, the IIIF Image API does not allow to give a JPEG quality (=compression) on the IIIF URL. SIPI   allows to configure the compression quality system wide with this parameter. Allowed values are in he range   [1..100] where 1 the worst quality (and highest compression factor = smallest file size) and 100 the highest   quality (with the lowest compression factor = biggest file size). Please note that SIPI is not able to provide   lossless compression for JPEG files. Cmdline option: <code>--quality</code> Environment variable: <code>SIPI_JPEGQUALITY</code> Default: <code>60</code> <li> <p><code>thumb_size=string</code>: Default size for thumbnails. Parameter must be IIIF conformant size string. This configuration   parameter can be used to define a default value for creating thumbnails. It has no direct implications but can be   used in LUA scripts (e.g. the pre_flight-function). Cmdline option: <code>--thumbsize</code> Environment variable: <code>SIPI_THUMBSIZE</code> Default: <code>!128,128</code></p> </li> <li> <p><code>logfile=path</code>: SIPI uses syslog as logging facility. The logging name   is <code>Sipi</code>. It supports the following levels:   \"EMERGENCY\", \"ALERT\", \"CRITICAL\", \"ERROR\", \"WARNING\", \"NOTICE\", \"INFORMATIONAL\", \"DEBUG\". Cmdline option: <code>--logfile</code> Environment variable: <code>SIPI_LOGFILE</code> Default: <code>Sipi</code></p> </li> <li> <p><code>loglevel=level</code>: SIPI uses syslog as logging facility. The logging name is <code>Sipi</code>. It supports the following levels:   \"EMERGENCY\", \"ALERT\", \"CRITICAL\", \"ERROR\", \"WARNING\", \"NOTICE\", \"INFORMATIONAL\", \"DEBUG\". Cmdline option: <code>--loglevel</code> Environment variable: <code>SIPI_LOGLEVEL</code> Default: <code>DEBUG</code></p> </li> <li> <p><code>max_temp_file_age=num</code>: The maximum allowed age of temporary files (in seconds) before they are deleted. Cmdline option: <code>--maxtmpage</code> Environment variable: <code>SIPI_MAXTMPAGE</code> Default: <code>86400</code> (one day)</p> </li>"},{"location":"sipi/#cache-configuration","title":"Cache Configuration","text":"<p>SIPI may optionally use a cache directory to store converted image in order to avoid computationally intensive conversions if a specific variant is requested several times. The cache is based on timestamps and the canonical IIIF URL. Before an image is being converted, the canonical URL is determined. If a file associated with this canonical URL is in the cache directory, the timestamp of the original file in the repository is compated to the cached file. If the cached file is newer, it will be served. If the file in the repository is newer, the cache file (which is outdated) will be deleted and replaced be the newly converted repository file (that is being sent to the client).</p> <p>The following configuration parameters determine the behaviour of the cache:</p> <ul> <li> <p><code>cachedir=path</code>: SIPI may optionally use a cache directory to store converted image in order to avoid computationally   intensive conversions if a specific variant is requested several times. Sipi starts with a warning if the cache   directory is defined but not existing. Cmdline option: <code>--cachedir</code> Environment variable: <code>SIPI_CACHEDIR</code> Default: <code>./cache</code></p> </li> <li> <p><code>cachesize=amount</code>: The maximal size of the cache. The cache will be purged if either the maximal size or maximal   number of files is reached. The amount has the form \"M\" with M indication Megabytes. Cmdline option: <code>--cachesize</code> Environment variable: <code>SIPI_CACHESIZE</code> Default: <code>200M</code> <li> <p><code>cache_nfiles=num</code>: The maximal number of files to be cached. The cache will be purged if either the maximal size    or maximal number of files is reached. Cmdline option: <code>--cachenfiles</code> Environment variable: <code>SIPI_CACHENFILES</code> Default: <code>200</code></p> </li> <li> <p><code>cache_hysteresis=float</code>: If the cache becomes full, the given percentage of file space is marked for reuse and purged. Cmdline option: <code>--cachehysteresis</code> Environment variable: <code>SIPI_CACHEHYSTERESIS</code> Default: <code>0.15</code></p> </li>"},{"location":"sipi/#configuration-of-the-http-file-server","title":"Configuration of the HTTP File Server","text":"<p>SIPI offers  HTTP file server for HTML and other files. Files with the ending <code>.elua</code> are HTTP-files with embeded LUA code. Everything between the ... tags is interpreted as LUA code and the output embedded in the data stream for the client.</p> <p>All configurations for the HTTP server are in the <code>fileserver</code> table:</p> <ul> <li> <p><code>docroot=path</code>: Path to the document root of the file server. Cmdline option: <code>--docroot</code> Environment variable: <code>SSIPI_DOCROOT</code> Default: <code>./server</code></p> </li> <li> <p><code>wwwroute=string</code>: Route for the file server should respond to requests.That is, a file with the name \"dada.html\"   is accessed with <code>http://dnsname/server/dada.html</code>, if the <code>wwwroute</code>is set to <code>/server</code>. Cmdline option: <code>--wwwroute</code> Environment variable: <code>SIPI_WWWROUTE</code> Default: <code>/server</code></p> </li> </ul>"},{"location":"sipi/#configuration-of-administrator-access","title":"Configuration of Administrator Access","text":"<p>SIPI allows special administrator access for some tasks. In order to allow for this, an administrator has to be defined as follows:</p> <pre><code>admin = {\n    --\n    -- username of admin user\n    --\n    user = 'admin',\n\n    --\n    -- Administration password\n    --\n    password = 'Sipi-Admin'\n}\n</code></pre> <p>If You're using the administrator user, please make sure that the config file is not exposed!</p>"},{"location":"sipi/#routing-table","title":"Routing Table","text":"<p>SIPI allows to implement RESTful interfaces or other services based on LUA-scripts which are located in the scripts directory. In order to use these LUA-scripts as endpoints, the appropriate routes have to be defined in the <code>routes</code> table. An entry has the following form: - <code>method</code>: the HTTP request. Supported are <code>GET</code>, <code>POST</code>, <code>PUT</code> and <code>DELETE</code>. - <code>route</code>: A URL path that may contain <code>/</code>'s. - <code>script</code>: Name of the LUA script in the script directory.</p> <p>Thus, the routing section of a SIPI configuration file may look as follows:</p> <pre><code>routes = {\n    {\n        method = 'DELETE',\n        route = '/api/cache',\n        script = 'cache.lua'\n    },\n    {\n        method = 'GET',\n        route = '/api/cache',\n        script = 'cache.lua'\n    },\n    {\n        method = 'POST',\n        route = '/api/upload',\n        script = 'upload.lua'\n    },\n    {\n        method = 'GET',\n        route = '/sqlite',\n        script = 'test_sqlite.lua'\n    }\n}\n</code></pre>"},{"location":"sqlite/","title":"Using SQLite in SIPI","text":"<p>Sipi supports SQLite 3 databases, which can be accessed from Lua scripts. You should use pcall to handle errors that may be returned by SQLite.</p>"},{"location":"sqlite/#opening-an-sqlite-database","title":"Opening an SQLite Database","text":"<pre><code>db = sqlite(path_to_db, access)\n</code></pre> <p>This creates a new opaque database object. The parameters are:</p> <ul> <li><code>path_to_db</code>: path to the sqlite3 database file.</li> <li><code>access</code>: Method of opening the database. Allowed are<ul> <li><code>'RO'</code>: readonly access. The file must exist and the SPIP server must have read access to it.</li> <li><code>'RW'</code>: read and write access. The file must exist and the SPIP server must have read/write access to it.</li> <li><code>'CRW'</code>: If the database file does not exist, it will be created and opened with read/write access.</li> </ul> </li> </ul> <p>To destroy the database object and free all resources, you can do this:</p> <pre><code>db = ~db\n</code></pre> <p>However, Lua's garbage collection will destroy the database object and free all resources when they are no longer used.</p>"},{"location":"sqlite/#preparing-a-query","title":"Preparing a Query","text":"<p>The SIPI sqlite interface supports direct queries as well as prepared statements. A direct query is constructed as follows:</p> <pre><code>qry = db &lt;&lt; 'SELECT * FROM image'\n</code></pre> <p>Or, if you want to use a prepared query statement:</p> <pre><code>qry = db &lt;&lt; 'INSERT INTO image (id, description) VALUES (?,?)'\n</code></pre> <p>The result of the <code>&lt;&lt;</code> operator (<code>qry</code>) will then be a query object containing a prepared query. If the query object is not needed anymore, it may be destroyed:</p> <pre><code>qry = ~qry\n</code></pre> <p>Query objects should be destroyed explicitly if not needed any longer.</p>"},{"location":"sqlite/#executing-a-query","title":"Executing a Query","text":"<p>Excuting (calling) a query objects gets the next row of data. If there are no more rows, <code>nil</code> is returned. The row is returned as array of values.</p> <pre><code>row = qry()\nwhile (row) do\n    print(row[0], ' -&gt; ', row[1])\n    row = qry()\nend\n</code></pre> <p>Or with a prepared statement:</p> <pre><code>row = qry('SGV_1960_00315', 'This is an image of a steam engine...')\n</code></pre> <p>The second way is used for prepared queries that contain parameters.</p>"},{"location":"0-release-notes/","title":"Main releases","text":""},{"location":"0-release-notes/#v310-release-notes","title":"v3.1.0 Release Notes","text":"<p>See the release 3.1.0 on GitHub.</p>"},{"location":"0-release-notes/#new-features","title":"New features:","text":"<ul> <li>Added sidecar support (Kakadu)</li> <li>Published on Dockerhub https://hub.docker.com/r/daschswiss/sipi under the V3.1.0 tag.</li> </ul>"},{"location":"0-release-notes/#v301-release-notes","title":"v3.0.1 Release Notes","text":"<p>See the release 3.0.1 on GitHub.</p>"},{"location":"0-release-notes/#new-features_1","title":"New features:","text":"<ul> <li>Compliant with the IIIF Image API 3.0</li> <li>Published on Dockerhub https://hub.docker.com/r/daschswiss/sipi (new URL) under the V3.0.1 tag.</li> </ul>"},{"location":"0-release-notes/#bug-fixes","title":"Bug fixes:","text":"<ul> <li>Fix parse URL crash</li> </ul>"},{"location":"0-release-notes/#v200-release-notes","title":"v2.0.0 Release Notes","text":"<p>See the release 2.0.0 on GitHub.</p>"},{"location":"0-release-notes/#new-features_2","title":"New features:","text":"<ul> <li>Published on Dockerhub https://hub.docker.com/r/dhlabbasel/sipi under the v2.0.0 tag.</li> </ul>"},{"location":"0-release-notes/#v140-release-notes","title":"v1.4.0 Release Notes","text":"<p>See the release 1.4.0 on GitHub.</p>"},{"location":"0-release-notes/#new-features_3","title":"New features:","text":"<ul> <li>Added latest kakadu version v7_A_4-01727L.zip</li> <li>support for CIELab for both 8- and 16-bit images</li> <li>try/catch for ICC profiles that are not supported by kakadu. These     profiles are added to the \"essential metadata\" in order to be     reinstated if the JPX is converted back to a TIFF or JPEG.</li> <li>added more unit tests</li> </ul>"},{"location":"0-release-notes/#bug-fixes_1","title":"Bug fixes:","text":"<ul> <li>16 Bit PNG images are now teated correctly by byteswapping of the     data (htons), since PNG uses network byte order which is usually     noit zthe host byte order on intel processors</li> <li>alpha channels are treated correctly with JPEG2000</li> <li>The parameter names in a multidata/form-data POST request now have     the double quotes removed</li> </ul>"},{"location":"0-release-notes/#v130-release-notes","title":"v1.3.0 Release Notes","text":"<p>See the release 1.3.0 on GitHub.</p>"},{"location":"0-release-notes/#new-features_4","title":"New features:","text":"<ul> <li>Added latest kakadu version v7_A_4-01727L.zip</li> <li>support for CIELab for both 8- and 16-bit images</li> <li>try/catch for ICC profiles that are not supported by kakadu. These     profiles are added to the \"essential metadata\" in order to be     reinstated if the JPX is converted back to a TIFF or JPEG.</li> <li>added more unit tests</li> </ul>"},{"location":"0-release-notes/#bug-fixes_2","title":"Bug fixes:","text":"<ul> <li>16 Bit PNG images are now teated correctly by byteswapping of the     data (htons), since PNG uses network byte order which is usually     noit zthe host byte order on intel processors</li> <li>alpha channels are treated correctly with JPEG2000</li> <li>The parameter names in a multidata/form-data POST request now have     the double quotes removed</li> </ul>"},{"location":"0-release-notes/#v120-release-notes","title":"v1.2.0 Release Notes","text":"<p>See the release 1.2.0 on GitHub.</p>"},{"location":"0-release-notes/#v110-release-notes","title":"v1.1.0 Release Notes","text":"<p>See the release 1.1.0 on GitHub.</p>"}]}