<lua>
--[[

This is a sample script that shows how an upload function for images can be implemented
using the lua interface of SIPI.

]]
success,token = authorize_page('admin.sipi.org', 'administrator', config.adminuser, config.password)
if not success then
    return
end
</lua>
<html>
    <head>
        <title>UPLOAD</title>
    </head>
    <body>
        <h1>UPLOAD</h1>
        <hr/>
		<h2>Header</h2>
		<table>
<lua>
    myimg = {}
    newfilename = {}
    for imgindex,imgparam in pairs(server.uploads) do

        --
        -- check if tmporary directory is available under image root, if not, create it
        --
        tmpdir = config.imgroot .. '/tmp/'
        local success, exists = server.fs.exists(tmpdir)
        if not success then
            server.sendStatus(500)
            server.log(exists, server.loglevel.LOG_ERR)
            return false
        end
        if not exists then
            local success, errmsg = server.fs.mkdir(tmpdir, 511)
            if not success then
                server.sendStatus(500)
                server.log(errmsg, server.loglevel.LOG_ERR)
                return false
            end
        end

        --
        -- copy the file to a safe place
        --
        local success, uuid62 = server.uuid62()
        if not success then
            server.sendStatus(500)
            server.log(uuid62, server.loglevel.LOG_ERR)
            return false
        end
        tmppath =  tmpdir .. uuid62
        local success, errmsg = server.copyTmpfile(imgindex, tmppath)
        if not success then
            server.sendStatus(500)
            server.log(errmsg, server.loglevel.LOG_ERR)
            return false
        end

        --
        -- create a new Lua image object. This reads the image into an
        -- internal in-memory representation independent of the original
        -- image format.
        --
        success, tmpimgref = SipiImage.new(tmppath, {original = imgparam["origname"], hash = "sha256"})
        if not success then
            server.sendStatus(500)
            server.log(gaga, server.loglevel.LOG_ERR)
            return false
        end

        myimg[imgindex] = tmpimgref

        filename = imgparam["origname"]
        n1, n2 = string.find(filename, '.', 1, true)
        newfilename[imgindex] = string.sub(filename, 1, n1 - 1) .. '.jp2'

        success, newfilepath = helper.filename_hash(newfilename[imgindex]);
        if not success then
            server.sendStatus(500)
            server.log(gaga, server.loglevel.LOG_ERR)
            return false
        end

        filename = config.imgroot .. '/' .. newfilepath

        --
        -- get the J2K compression parameter
        --
        j2k_params = {}
        pcnt = 0
        if server.post['Cprofile'] ~= nil then
            j2k_params['Cprofile'] = server.post['Cprofile']
            pcnt = pcnt + 1
        end
        if server.post['Creversible'] ~= nil then
            j2k_params['Creversible'] = server.post['Creversible']
            pcnt = pcnt + 1
        end
        if server.post['rates'] ~= nil and server.post['rates'] ~= '' then
            j2k_params['rates'] = server.post['rates']
            pcnt = pcnt + 1
        end
        if server.post['Clayers'] ~= nil and server.post['Clayers'] ~= '' then
            j2k_params['Clayers'] = server.post['Clayers']
            pcnt = pcnt + 1
        end
        if server.post['Clevels'] ~= nil and server.post['Clevels'] ~= '' then
            j2k_params['Clevels'] = server.post['Clevels']
            pcnt = pcnt + 1
        end
        if server.post['Corder'] ~= nil then
            j2k_params['Corder'] = server.post['Corder']
            pcnt = pcnt + 1
        end
        if server.post['Cprecincts'] ~= nil and server.post['Cprecincts'] ~= '' then
            j2k_params['Cprecincts'] = server.post['Cprecincts']
            pcnt = pcnt + 1
        end
        if server.post['Cblk'] ~= nil and server.post['Cblk'] ~= ''then
            j2k_params['Cblk'] = server.post['Cblk']
            pcnt = pcnt + 1
        end
        if server.post['Cuse_sop'] ~= nil then
            j2k_params['Cuse_sop'] = server.post['Cuse_sop']
            pcnt = pcnt + 1
        end

        if pcnt > 0 then
            local status, errmsg = myimg[imgindex]:write(filename, j2k_params)
            if not status then
                server.print('Error converting image to j2k: ', errmsg)
            end
        else
            local status, errmsg = myimg[imgindex]:write(filename)
            if not status then
                server.print('Error converting image to j2k: ', errmsg)
            end
        end

        success, errmsg = server.fs.unlink(tmppath)
        if not success then
            server.sendStatus(500)
            server.log(errmsg, server.loglevel.LOG_ERR)
            return false
        end
    end
    if server.secure then
        protocol = 'https://'
    else
        protocol = 'http://'
    end
    for imgindex,fn in pairs(newfilename) do
        server.print('<tr><td>', fn,
            '</td><td><a href="', protocol, server.host, '/images/', fn, '/full/max/0/default.jpg"><img src="', protocol, server.host, '/images/', fn,'/full/^,250/0/default.jpg" /></a></td></tr>')
    end

</lua>
    </table>
    </body>
</html>
